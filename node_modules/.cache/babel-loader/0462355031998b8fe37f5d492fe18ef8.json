{"ast":null,"code":"/**!\n * @fileOverview Kickass library to create and place poppers near their reference elements.\n * @version 1.16.1-lts\n * @license\n * Copyright (c) 2016 Federico Zivolo and contributors\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in all\n * copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n */\nvar isBrowser = typeof window !== 'undefined' && typeof document !== 'undefined' && typeof navigator !== 'undefined';\n\nvar timeoutDuration = function () {\n  var longerTimeoutBrowsers = ['Edge', 'Trident', 'Firefox'];\n\n  for (var i = 0; i < longerTimeoutBrowsers.length; i += 1) {\n    if (isBrowser && navigator.userAgent.indexOf(longerTimeoutBrowsers[i]) >= 0) {\n      return 1;\n    }\n  }\n\n  return 0;\n}();\n\nfunction microtaskDebounce(fn) {\n  var called = false;\n  return function () {\n    if (called) {\n      return;\n    }\n\n    called = true;\n    window.Promise.resolve().then(function () {\n      called = false;\n      fn();\n    });\n  };\n}\n\nfunction taskDebounce(fn) {\n  var scheduled = false;\n  return function () {\n    if (!scheduled) {\n      scheduled = true;\n      setTimeout(function () {\n        scheduled = false;\n        fn();\n      }, timeoutDuration);\n    }\n  };\n}\n\nvar supportsMicroTasks = isBrowser && window.Promise;\n/**\n* Create a debounced version of a method, that's asynchronously deferred\n* but called in the minimum time possible.\n*\n* @method\n* @memberof Popper.Utils\n* @argument {Function} fn\n* @returns {Function}\n*/\n\nvar debounce = supportsMicroTasks ? microtaskDebounce : taskDebounce;\n/**\n * Check if the given variable is a function\n * @method\n * @memberof Popper.Utils\n * @argument {Any} functionToCheck - variable to check\n * @returns {Boolean} answer to: is a function?\n */\n\nfunction isFunction(functionToCheck) {\n  var getType = {};\n  return functionToCheck && getType.toString.call(functionToCheck) === '[object Function]';\n}\n/**\n * Get CSS computed property of the given element\n * @method\n * @memberof Popper.Utils\n * @argument {Eement} element\n * @argument {String} property\n */\n\n\nfunction getStyleComputedProperty(element, property) {\n  if (element.nodeType !== 1) {\n    return [];\n  } // NOTE: 1 DOM access here\n\n\n  var window = element.ownerDocument.defaultView;\n  var css = window.getComputedStyle(element, null);\n  return property ? css[property] : css;\n}\n/**\n * Returns the parentNode or the host of the element\n * @method\n * @memberof Popper.Utils\n * @argument {Element} element\n * @returns {Element} parent\n */\n\n\nfunction getParentNode(element) {\n  if (element.nodeName === 'HTML') {\n    return element;\n  }\n\n  return element.parentNode || element.host;\n}\n/**\n * Returns the scrolling parent of the given element\n * @method\n * @memberof Popper.Utils\n * @argument {Element} element\n * @returns {Element} scroll parent\n */\n\n\nfunction getScrollParent(element) {\n  // Return body, `getScroll` will take care to get the correct `scrollTop` from it\n  if (!element) {\n    return document.body;\n  }\n\n  switch (element.nodeName) {\n    case 'HTML':\n    case 'BODY':\n      return element.ownerDocument.body;\n\n    case '#document':\n      return element.body;\n  } // Firefox want us to check `-x` and `-y` variations as well\n\n\n  var _getStyleComputedProp = getStyleComputedProperty(element),\n      overflow = _getStyleComputedProp.overflow,\n      overflowX = _getStyleComputedProp.overflowX,\n      overflowY = _getStyleComputedProp.overflowY;\n\n  if (/(auto|scroll|overlay)/.test(overflow + overflowY + overflowX)) {\n    return element;\n  }\n\n  return getScrollParent(getParentNode(element));\n}\n/**\n * Returns the reference node of the reference object, or the reference object itself.\n * @method\n * @memberof Popper.Utils\n * @param {Element|Object} reference - the reference element (the popper will be relative to this)\n * @returns {Element} parent\n */\n\n\nfunction getReferenceNode(reference) {\n  return reference && reference.referenceNode ? reference.referenceNode : reference;\n}\n\nvar isIE11 = isBrowser && !!(window.MSInputMethodContext && document.documentMode);\nvar isIE10 = isBrowser && /MSIE 10/.test(navigator.userAgent);\n/**\n * Determines if the browser is Internet Explorer\n * @method\n * @memberof Popper.Utils\n * @param {Number} version to check\n * @returns {Boolean} isIE\n */\n\nfunction isIE(version) {\n  if (version === 11) {\n    return isIE11;\n  }\n\n  if (version === 10) {\n    return isIE10;\n  }\n\n  return isIE11 || isIE10;\n}\n/**\n * Returns the offset parent of the given element\n * @method\n * @memberof Popper.Utils\n * @argument {Element} element\n * @returns {Element} offset parent\n */\n\n\nfunction getOffsetParent(element) {\n  if (!element) {\n    return document.documentElement;\n  }\n\n  var noOffsetParent = isIE(10) ? document.body : null; // NOTE: 1 DOM access here\n\n  var offsetParent = element.offsetParent || null; // Skip hidden elements which don't have an offsetParent\n\n  while (offsetParent === noOffsetParent && element.nextElementSibling) {\n    offsetParent = (element = element.nextElementSibling).offsetParent;\n  }\n\n  var nodeName = offsetParent && offsetParent.nodeName;\n\n  if (!nodeName || nodeName === 'BODY' || nodeName === 'HTML') {\n    return element ? element.ownerDocument.documentElement : document.documentElement;\n  } // .offsetParent will return the closest TH, TD or TABLE in case\n  // no offsetParent is present, I hate this job...\n\n\n  if (['TH', 'TD', 'TABLE'].indexOf(offsetParent.nodeName) !== -1 && getStyleComputedProperty(offsetParent, 'position') === 'static') {\n    return getOffsetParent(offsetParent);\n  }\n\n  return offsetParent;\n}\n\nfunction isOffsetContainer(element) {\n  var nodeName = element.nodeName;\n\n  if (nodeName === 'BODY') {\n    return false;\n  }\n\n  return nodeName === 'HTML' || getOffsetParent(element.firstElementChild) === element;\n}\n/**\n * Finds the root node (document, shadowDOM root) of the given element\n * @method\n * @memberof Popper.Utils\n * @argument {Element} node\n * @returns {Element} root node\n */\n\n\nfunction getRoot(node) {\n  if (node.parentNode !== null) {\n    return getRoot(node.parentNode);\n  }\n\n  return node;\n}\n/**\n * Finds the offset parent common to the two provided nodes\n * @method\n * @memberof Popper.Utils\n * @argument {Element} element1\n * @argument {Element} element2\n * @returns {Element} common offset parent\n */\n\n\nfunction findCommonOffsetParent(element1, element2) {\n  // This check is needed to avoid errors in case one of the elements isn't defined for any reason\n  if (!element1 || !element1.nodeType || !element2 || !element2.nodeType) {\n    return document.documentElement;\n  } // Here we make sure to give as \"start\" the element that comes first in the DOM\n\n\n  var order = element1.compareDocumentPosition(element2) & Node.DOCUMENT_POSITION_FOLLOWING;\n  var start = order ? element1 : element2;\n  var end = order ? element2 : element1; // Get common ancestor container\n\n  var range = document.createRange();\n  range.setStart(start, 0);\n  range.setEnd(end, 0);\n  var commonAncestorContainer = range.commonAncestorContainer; // Both nodes are inside #document\n\n  if (element1 !== commonAncestorContainer && element2 !== commonAncestorContainer || start.contains(end)) {\n    if (isOffsetContainer(commonAncestorContainer)) {\n      return commonAncestorContainer;\n    }\n\n    return getOffsetParent(commonAncestorContainer);\n  } // one of the nodes is inside shadowDOM, find which one\n\n\n  var element1root = getRoot(element1);\n\n  if (element1root.host) {\n    return findCommonOffsetParent(element1root.host, element2);\n  } else {\n    return findCommonOffsetParent(element1, getRoot(element2).host);\n  }\n}\n/**\n * Gets the scroll value of the given element in the given side (top and left)\n * @method\n * @memberof Popper.Utils\n * @argument {Element} element\n * @argument {String} side `top` or `left`\n * @returns {number} amount of scrolled pixels\n */\n\n\nfunction getScroll(element) {\n  var side = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'top';\n  var upperSide = side === 'top' ? 'scrollTop' : 'scrollLeft';\n  var nodeName = element.nodeName;\n\n  if (nodeName === 'BODY' || nodeName === 'HTML') {\n    var html = element.ownerDocument.documentElement;\n    var scrollingElement = element.ownerDocument.scrollingElement || html;\n    return scrollingElement[upperSide];\n  }\n\n  return element[upperSide];\n}\n/*\n * Sum or subtract the element scroll values (left and top) from a given rect object\n * @method\n * @memberof Popper.Utils\n * @param {Object} rect - Rect object you want to change\n * @param {HTMLElement} element - The element from the function reads the scroll values\n * @param {Boolean} subtract - set to true if you want to subtract the scroll values\n * @return {Object} rect - The modifier rect object\n */\n\n\nfunction includeScroll(rect, element) {\n  var subtract = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n  var scrollTop = getScroll(element, 'top');\n  var scrollLeft = getScroll(element, 'left');\n  var modifier = subtract ? -1 : 1;\n  rect.top += scrollTop * modifier;\n  rect.bottom += scrollTop * modifier;\n  rect.left += scrollLeft * modifier;\n  rect.right += scrollLeft * modifier;\n  return rect;\n}\n/*\n * Helper to detect borders of a given element\n * @method\n * @memberof Popper.Utils\n * @param {CSSStyleDeclaration} styles\n * Result of `getStyleComputedProperty` on the given element\n * @param {String} axis - `x` or `y`\n * @return {number} borders - The borders size of the given axis\n */\n\n\nfunction getBordersSize(styles, axis) {\n  var sideA = axis === 'x' ? 'Left' : 'Top';\n  var sideB = sideA === 'Left' ? 'Right' : 'Bottom';\n  return parseFloat(styles['border' + sideA + 'Width']) + parseFloat(styles['border' + sideB + 'Width']);\n}\n\nfunction getSize(axis, body, html, computedStyle) {\n  return Math.max(body['offset' + axis], body['scroll' + axis], html['client' + axis], html['offset' + axis], html['scroll' + axis], isIE(10) ? parseInt(html['offset' + axis]) + parseInt(computedStyle['margin' + (axis === 'Height' ? 'Top' : 'Left')]) + parseInt(computedStyle['margin' + (axis === 'Height' ? 'Bottom' : 'Right')]) : 0);\n}\n\nfunction getWindowSizes(document) {\n  var body = document.body;\n  var html = document.documentElement;\n  var computedStyle = isIE(10) && getComputedStyle(html);\n  return {\n    height: getSize('Height', body, html, computedStyle),\n    width: getSize('Width', body, html, computedStyle)\n  };\n}\n\nvar classCallCheck = function (instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n};\n\nvar createClass = function () {\n  function defineProperties(target, props) {\n    for (var i = 0; i < props.length; i++) {\n      var descriptor = props[i];\n      descriptor.enumerable = descriptor.enumerable || false;\n      descriptor.configurable = true;\n      if (\"value\" in descriptor) descriptor.writable = true;\n      Object.defineProperty(target, descriptor.key, descriptor);\n    }\n  }\n\n  return function (Constructor, protoProps, staticProps) {\n    if (protoProps) defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) defineProperties(Constructor, staticProps);\n    return Constructor;\n  };\n}();\n\nvar defineProperty = function (obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n};\n\nvar _extends = Object.assign || function (target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i];\n\n    for (var key in source) {\n      if (Object.prototype.hasOwnProperty.call(source, key)) {\n        target[key] = source[key];\n      }\n    }\n  }\n\n  return target;\n};\n/**\n * Given element offsets, generate an output similar to getBoundingClientRect\n * @method\n * @memberof Popper.Utils\n * @argument {Object} offsets\n * @returns {Object} ClientRect like output\n */\n\n\nfunction getClientRect(offsets) {\n  return _extends({}, offsets, {\n    right: offsets.left + offsets.width,\n    bottom: offsets.top + offsets.height\n  });\n}\n/**\n * Get bounding client rect of given element\n * @method\n * @memberof Popper.Utils\n * @param {HTMLElement} element\n * @return {Object} client rect\n */\n\n\nfunction getBoundingClientRect(element) {\n  var rect = {}; // IE10 10 FIX: Please, don't ask, the element isn't\n  // considered in DOM in some circumstances...\n  // This isn't reproducible in IE10 compatibility mode of IE11\n\n  try {\n    if (isIE(10)) {\n      rect = element.getBoundingClientRect();\n      var scrollTop = getScroll(element, 'top');\n      var scrollLeft = getScroll(element, 'left');\n      rect.top += scrollTop;\n      rect.left += scrollLeft;\n      rect.bottom += scrollTop;\n      rect.right += scrollLeft;\n    } else {\n      rect = element.getBoundingClientRect();\n    }\n  } catch (e) {}\n\n  var result = {\n    left: rect.left,\n    top: rect.top,\n    width: rect.right - rect.left,\n    height: rect.bottom - rect.top\n  }; // subtract scrollbar size from sizes\n\n  var sizes = element.nodeName === 'HTML' ? getWindowSizes(element.ownerDocument) : {};\n  var width = sizes.width || element.clientWidth || result.width;\n  var height = sizes.height || element.clientHeight || result.height;\n  var horizScrollbar = element.offsetWidth - width;\n  var vertScrollbar = element.offsetHeight - height; // if an hypothetical scrollbar is detected, we must be sure it's not a `border`\n  // we make this check conditional for performance reasons\n\n  if (horizScrollbar || vertScrollbar) {\n    var styles = getStyleComputedProperty(element);\n    horizScrollbar -= getBordersSize(styles, 'x');\n    vertScrollbar -= getBordersSize(styles, 'y');\n    result.width -= horizScrollbar;\n    result.height -= vertScrollbar;\n  }\n\n  return getClientRect(result);\n}\n\nfunction getOffsetRectRelativeToArbitraryNode(children, parent) {\n  var fixedPosition = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n  var isIE10 = isIE(10);\n  var isHTML = parent.nodeName === 'HTML';\n  var childrenRect = getBoundingClientRect(children);\n  var parentRect = getBoundingClientRect(parent);\n  var scrollParent = getScrollParent(children);\n  var styles = getStyleComputedProperty(parent);\n  var borderTopWidth = parseFloat(styles.borderTopWidth);\n  var borderLeftWidth = parseFloat(styles.borderLeftWidth); // In cases where the parent is fixed, we must ignore negative scroll in offset calc\n\n  if (fixedPosition && isHTML) {\n    parentRect.top = Math.max(parentRect.top, 0);\n    parentRect.left = Math.max(parentRect.left, 0);\n  }\n\n  var offsets = getClientRect({\n    top: childrenRect.top - parentRect.top - borderTopWidth,\n    left: childrenRect.left - parentRect.left - borderLeftWidth,\n    width: childrenRect.width,\n    height: childrenRect.height\n  });\n  offsets.marginTop = 0;\n  offsets.marginLeft = 0; // Subtract margins of documentElement in case it's being used as parent\n  // we do this only on HTML because it's the only element that behaves\n  // differently when margins are applied to it. The margins are included in\n  // the box of the documentElement, in the other cases not.\n\n  if (!isIE10 && isHTML) {\n    var marginTop = parseFloat(styles.marginTop);\n    var marginLeft = parseFloat(styles.marginLeft);\n    offsets.top -= borderTopWidth - marginTop;\n    offsets.bottom -= borderTopWidth - marginTop;\n    offsets.left -= borderLeftWidth - marginLeft;\n    offsets.right -= borderLeftWidth - marginLeft; // Attach marginTop and marginLeft because in some circumstances we may need them\n\n    offsets.marginTop = marginTop;\n    offsets.marginLeft = marginLeft;\n  }\n\n  if (isIE10 && !fixedPosition ? parent.contains(scrollParent) : parent === scrollParent && scrollParent.nodeName !== 'BODY') {\n    offsets = includeScroll(offsets, parent);\n  }\n\n  return offsets;\n}\n\nfunction getViewportOffsetRectRelativeToArtbitraryNode(element) {\n  var excludeScroll = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n  var html = element.ownerDocument.documentElement;\n  var relativeOffset = getOffsetRectRelativeToArbitraryNode(element, html);\n  var width = Math.max(html.clientWidth, window.innerWidth || 0);\n  var height = Math.max(html.clientHeight, window.innerHeight || 0);\n  var scrollTop = !excludeScroll ? getScroll(html) : 0;\n  var scrollLeft = !excludeScroll ? getScroll(html, 'left') : 0;\n  var offset = {\n    top: scrollTop - relativeOffset.top + relativeOffset.marginTop,\n    left: scrollLeft - relativeOffset.left + relativeOffset.marginLeft,\n    width: width,\n    height: height\n  };\n  return getClientRect(offset);\n}\n/**\n * Check if the given element is fixed or is inside a fixed parent\n * @method\n * @memberof Popper.Utils\n * @argument {Element} element\n * @argument {Element} customContainer\n * @returns {Boolean} answer to \"isFixed?\"\n */\n\n\nfunction isFixed(element) {\n  var nodeName = element.nodeName;\n\n  if (nodeName === 'BODY' || nodeName === 'HTML') {\n    return false;\n  }\n\n  if (getStyleComputedProperty(element, 'position') === 'fixed') {\n    return true;\n  }\n\n  var parentNode = getParentNode(element);\n\n  if (!parentNode) {\n    return false;\n  }\n\n  return isFixed(parentNode);\n}\n/**\n * Finds the first parent of an element that has a transformed property defined\n * @method\n * @memberof Popper.Utils\n * @argument {Element} element\n * @returns {Element} first transformed parent or documentElement\n */\n\n\nfunction getFixedPositionOffsetParent(element) {\n  // This check is needed to avoid errors in case one of the elements isn't defined for any reason\n  if (!element || !element.parentElement || isIE()) {\n    return document.documentElement;\n  }\n\n  var el = element.parentElement;\n\n  while (el && getStyleComputedProperty(el, 'transform') === 'none') {\n    el = el.parentElement;\n  }\n\n  return el || document.documentElement;\n}\n/**\n * Computed the boundaries limits and return them\n * @method\n * @memberof Popper.Utils\n * @param {HTMLElement} popper\n * @param {HTMLElement} reference\n * @param {number} padding\n * @param {HTMLElement} boundariesElement - Element used to define the boundaries\n * @param {Boolean} fixedPosition - Is in fixed position mode\n * @returns {Object} Coordinates of the boundaries\n */\n\n\nfunction getBoundaries(popper, reference, padding, boundariesElement) {\n  var fixedPosition = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : false; // NOTE: 1 DOM access here\n\n  var boundaries = {\n    top: 0,\n    left: 0\n  };\n  var offsetParent = fixedPosition ? getFixedPositionOffsetParent(popper) : findCommonOffsetParent(popper, getReferenceNode(reference)); // Handle viewport case\n\n  if (boundariesElement === 'viewport') {\n    boundaries = getViewportOffsetRectRelativeToArtbitraryNode(offsetParent, fixedPosition);\n  } else {\n    // Handle other cases based on DOM element used as boundaries\n    var boundariesNode = void 0;\n\n    if (boundariesElement === 'scrollParent') {\n      boundariesNode = getScrollParent(getParentNode(reference));\n\n      if (boundariesNode.nodeName === 'BODY') {\n        boundariesNode = popper.ownerDocument.documentElement;\n      }\n    } else if (boundariesElement === 'window') {\n      boundariesNode = popper.ownerDocument.documentElement;\n    } else {\n      boundariesNode = boundariesElement;\n    }\n\n    var offsets = getOffsetRectRelativeToArbitraryNode(boundariesNode, offsetParent, fixedPosition); // In case of HTML, we need a different computation\n\n    if (boundariesNode.nodeName === 'HTML' && !isFixed(offsetParent)) {\n      var _getWindowSizes = getWindowSizes(popper.ownerDocument),\n          height = _getWindowSizes.height,\n          width = _getWindowSizes.width;\n\n      boundaries.top += offsets.top - offsets.marginTop;\n      boundaries.bottom = height + offsets.top;\n      boundaries.left += offsets.left - offsets.marginLeft;\n      boundaries.right = width + offsets.left;\n    } else {\n      // for all the other DOM elements, this one is good\n      boundaries = offsets;\n    }\n  } // Add paddings\n\n\n  padding = padding || 0;\n  var isPaddingNumber = typeof padding === 'number';\n  boundaries.left += isPaddingNumber ? padding : padding.left || 0;\n  boundaries.top += isPaddingNumber ? padding : padding.top || 0;\n  boundaries.right -= isPaddingNumber ? padding : padding.right || 0;\n  boundaries.bottom -= isPaddingNumber ? padding : padding.bottom || 0;\n  return boundaries;\n}\n\nfunction getArea(_ref) {\n  var width = _ref.width,\n      height = _ref.height;\n  return width * height;\n}\n/**\n * Utility used to transform the `auto` placement to the placement with more\n * available space.\n * @method\n * @memberof Popper.Utils\n * @argument {Object} data - The data object generated by update method\n * @argument {Object} options - Modifiers configuration and options\n * @returns {Object} The data object, properly modified\n */\n\n\nfunction computeAutoPlacement(placement, refRect, popper, reference, boundariesElement) {\n  var padding = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : 0;\n\n  if (placement.indexOf('auto') === -1) {\n    return placement;\n  }\n\n  var boundaries = getBoundaries(popper, reference, padding, boundariesElement);\n  var rects = {\n    top: {\n      width: boundaries.width,\n      height: refRect.top - boundaries.top\n    },\n    right: {\n      width: boundaries.right - refRect.right,\n      height: boundaries.height\n    },\n    bottom: {\n      width: boundaries.width,\n      height: boundaries.bottom - refRect.bottom\n    },\n    left: {\n      width: refRect.left - boundaries.left,\n      height: boundaries.height\n    }\n  };\n  var sortedAreas = Object.keys(rects).map(function (key) {\n    return _extends({\n      key: key\n    }, rects[key], {\n      area: getArea(rects[key])\n    });\n  }).sort(function (a, b) {\n    return b.area - a.area;\n  });\n  var filteredAreas = sortedAreas.filter(function (_ref2) {\n    var width = _ref2.width,\n        height = _ref2.height;\n    return width >= popper.clientWidth && height >= popper.clientHeight;\n  });\n  var computedPlacement = filteredAreas.length > 0 ? filteredAreas[0].key : sortedAreas[0].key;\n  var variation = placement.split('-')[1];\n  return computedPlacement + (variation ? '-' + variation : '');\n}\n/**\n * Get offsets to the reference element\n * @method\n * @memberof Popper.Utils\n * @param {Object} state\n * @param {Element} popper - the popper element\n * @param {Element} reference - the reference element (the popper will be relative to this)\n * @param {Element} fixedPosition - is in fixed position mode\n * @returns {Object} An object containing the offsets which will be applied to the popper\n */\n\n\nfunction getReferenceOffsets(state, popper, reference) {\n  var fixedPosition = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : null;\n  var commonOffsetParent = fixedPosition ? getFixedPositionOffsetParent(popper) : findCommonOffsetParent(popper, getReferenceNode(reference));\n  return getOffsetRectRelativeToArbitraryNode(reference, commonOffsetParent, fixedPosition);\n}\n/**\n * Get the outer sizes of the given element (offset size + margins)\n * @method\n * @memberof Popper.Utils\n * @argument {Element} element\n * @returns {Object} object containing width and height properties\n */\n\n\nfunction getOuterSizes(element) {\n  var window = element.ownerDocument.defaultView;\n  var styles = window.getComputedStyle(element);\n  var x = parseFloat(styles.marginTop || 0) + parseFloat(styles.marginBottom || 0);\n  var y = parseFloat(styles.marginLeft || 0) + parseFloat(styles.marginRight || 0);\n  var result = {\n    width: element.offsetWidth + y,\n    height: element.offsetHeight + x\n  };\n  return result;\n}\n/**\n * Get the opposite placement of the given one\n * @method\n * @memberof Popper.Utils\n * @argument {String} placement\n * @returns {String} flipped placement\n */\n\n\nfunction getOppositePlacement(placement) {\n  var hash = {\n    left: 'right',\n    right: 'left',\n    bottom: 'top',\n    top: 'bottom'\n  };\n  return placement.replace(/left|right|bottom|top/g, function (matched) {\n    return hash[matched];\n  });\n}\n/**\n * Get offsets to the popper\n * @method\n * @memberof Popper.Utils\n * @param {Object} position - CSS position the Popper will get applied\n * @param {HTMLElement} popper - the popper element\n * @param {Object} referenceOffsets - the reference offsets (the popper will be relative to this)\n * @param {String} placement - one of the valid placement options\n * @returns {Object} popperOffsets - An object containing the offsets which will be applied to the popper\n */\n\n\nfunction getPopperOffsets(popper, referenceOffsets, placement) {\n  placement = placement.split('-')[0]; // Get popper node sizes\n\n  var popperRect = getOuterSizes(popper); // Add position, width and height to our offsets object\n\n  var popperOffsets = {\n    width: popperRect.width,\n    height: popperRect.height\n  }; // depending by the popper placement we have to compute its offsets slightly differently\n\n  var isHoriz = ['right', 'left'].indexOf(placement) !== -1;\n  var mainSide = isHoriz ? 'top' : 'left';\n  var secondarySide = isHoriz ? 'left' : 'top';\n  var measurement = isHoriz ? 'height' : 'width';\n  var secondaryMeasurement = !isHoriz ? 'height' : 'width';\n  popperOffsets[mainSide] = referenceOffsets[mainSide] + referenceOffsets[measurement] / 2 - popperRect[measurement] / 2;\n\n  if (placement === secondarySide) {\n    popperOffsets[secondarySide] = referenceOffsets[secondarySide] - popperRect[secondaryMeasurement];\n  } else {\n    popperOffsets[secondarySide] = referenceOffsets[getOppositePlacement(secondarySide)];\n  }\n\n  return popperOffsets;\n}\n/**\n * Mimics the `find` method of Array\n * @method\n * @memberof Popper.Utils\n * @argument {Array} arr\n * @argument prop\n * @argument value\n * @returns index or -1\n */\n\n\nfunction find(arr, check) {\n  // use native find if supported\n  if (Array.prototype.find) {\n    return arr.find(check);\n  } // use `filter` to obtain the same behavior of `find`\n\n\n  return arr.filter(check)[0];\n}\n/**\n * Return the index of the matching object\n * @method\n * @memberof Popper.Utils\n * @argument {Array} arr\n * @argument prop\n * @argument value\n * @returns index or -1\n */\n\n\nfunction findIndex(arr, prop, value) {\n  // use native findIndex if supported\n  if (Array.prototype.findIndex) {\n    return arr.findIndex(function (cur) {\n      return cur[prop] === value;\n    });\n  } // use `find` + `indexOf` if `findIndex` isn't supported\n\n\n  var match = find(arr, function (obj) {\n    return obj[prop] === value;\n  });\n  return arr.indexOf(match);\n}\n/**\n * Loop trough the list of modifiers and run them in order,\n * each of them will then edit the data object.\n * @method\n * @memberof Popper.Utils\n * @param {dataObject} data\n * @param {Array} modifiers\n * @param {String} ends - Optional modifier name used as stopper\n * @returns {dataObject}\n */\n\n\nfunction runModifiers(modifiers, data, ends) {\n  var modifiersToRun = ends === undefined ? modifiers : modifiers.slice(0, findIndex(modifiers, 'name', ends));\n  modifiersToRun.forEach(function (modifier) {\n    if (modifier['function']) {\n      // eslint-disable-line dot-notation\n      console.warn('`modifier.function` is deprecated, use `modifier.fn`!');\n    }\n\n    var fn = modifier['function'] || modifier.fn; // eslint-disable-line dot-notation\n\n    if (modifier.enabled && isFunction(fn)) {\n      // Add properties to offsets to make them a complete clientRect object\n      // we do this before each modifier to make sure the previous one doesn't\n      // mess with these values\n      data.offsets.popper = getClientRect(data.offsets.popper);\n      data.offsets.reference = getClientRect(data.offsets.reference);\n      data = fn(data, modifier);\n    }\n  });\n  return data;\n}\n/**\n * Updates the position of the popper, computing the new offsets and applying\n * the new style.<br />\n * Prefer `scheduleUpdate` over `update` because of performance reasons.\n * @method\n * @memberof Popper\n */\n\n\nfunction update() {\n  // if popper is destroyed, don't perform any further update\n  if (this.state.isDestroyed) {\n    return;\n  }\n\n  var data = {\n    instance: this,\n    styles: {},\n    arrowStyles: {},\n    attributes: {},\n    flipped: false,\n    offsets: {}\n  }; // compute reference element offsets\n\n  data.offsets.reference = getReferenceOffsets(this.state, this.popper, this.reference, this.options.positionFixed); // compute auto placement, store placement inside the data object,\n  // modifiers will be able to edit `placement` if needed\n  // and refer to originalPlacement to know the original value\n\n  data.placement = computeAutoPlacement(this.options.placement, data.offsets.reference, this.popper, this.reference, this.options.modifiers.flip.boundariesElement, this.options.modifiers.flip.padding); // store the computed placement inside `originalPlacement`\n\n  data.originalPlacement = data.placement;\n  data.positionFixed = this.options.positionFixed; // compute the popper offsets\n\n  data.offsets.popper = getPopperOffsets(this.popper, data.offsets.reference, data.placement);\n  data.offsets.popper.position = this.options.positionFixed ? 'fixed' : 'absolute'; // run the modifiers\n\n  data = runModifiers(this.modifiers, data); // the first `update` will call `onCreate` callback\n  // the other ones will call `onUpdate` callback\n\n  if (!this.state.isCreated) {\n    this.state.isCreated = true;\n    this.options.onCreate(data);\n  } else {\n    this.options.onUpdate(data);\n  }\n}\n/**\n * Helper used to know if the given modifier is enabled.\n * @method\n * @memberof Popper.Utils\n * @returns {Boolean}\n */\n\n\nfunction isModifierEnabled(modifiers, modifierName) {\n  return modifiers.some(function (_ref) {\n    var name = _ref.name,\n        enabled = _ref.enabled;\n    return enabled && name === modifierName;\n  });\n}\n/**\n * Get the prefixed supported property name\n * @method\n * @memberof Popper.Utils\n * @argument {String} property (camelCase)\n * @returns {String} prefixed property (camelCase or PascalCase, depending on the vendor prefix)\n */\n\n\nfunction getSupportedPropertyName(property) {\n  var prefixes = [false, 'ms', 'Webkit', 'Moz', 'O'];\n  var upperProp = property.charAt(0).toUpperCase() + property.slice(1);\n\n  for (var i = 0; i < prefixes.length; i++) {\n    var prefix = prefixes[i];\n    var toCheck = prefix ? '' + prefix + upperProp : property;\n\n    if (typeof document.body.style[toCheck] !== 'undefined') {\n      return toCheck;\n    }\n  }\n\n  return null;\n}\n/**\n * Destroys the popper.\n * @method\n * @memberof Popper\n */\n\n\nfunction destroy() {\n  this.state.isDestroyed = true; // touch DOM only if `applyStyle` modifier is enabled\n\n  if (isModifierEnabled(this.modifiers, 'applyStyle')) {\n    this.popper.removeAttribute('x-placement');\n    this.popper.style.position = '';\n    this.popper.style.top = '';\n    this.popper.style.left = '';\n    this.popper.style.right = '';\n    this.popper.style.bottom = '';\n    this.popper.style.willChange = '';\n    this.popper.style[getSupportedPropertyName('transform')] = '';\n  }\n\n  this.disableEventListeners(); // remove the popper if user explicitly asked for the deletion on destroy\n  // do not use `remove` because IE11 doesn't support it\n\n  if (this.options.removeOnDestroy) {\n    this.popper.parentNode.removeChild(this.popper);\n  }\n\n  return this;\n}\n/**\n * Get the window associated with the element\n * @argument {Element} element\n * @returns {Window}\n */\n\n\nfunction getWindow(element) {\n  var ownerDocument = element.ownerDocument;\n  return ownerDocument ? ownerDocument.defaultView : window;\n}\n\nfunction attachToScrollParents(scrollParent, event, callback, scrollParents) {\n  var isBody = scrollParent.nodeName === 'BODY';\n  var target = isBody ? scrollParent.ownerDocument.defaultView : scrollParent;\n  target.addEventListener(event, callback, {\n    passive: true\n  });\n\n  if (!isBody) {\n    attachToScrollParents(getScrollParent(target.parentNode), event, callback, scrollParents);\n  }\n\n  scrollParents.push(target);\n}\n/**\n * Setup needed event listeners used to update the popper position\n * @method\n * @memberof Popper.Utils\n * @private\n */\n\n\nfunction setupEventListeners(reference, options, state, updateBound) {\n  // Resize event listener on window\n  state.updateBound = updateBound;\n  getWindow(reference).addEventListener('resize', state.updateBound, {\n    passive: true\n  }); // Scroll event listener on scroll parents\n\n  var scrollElement = getScrollParent(reference);\n  attachToScrollParents(scrollElement, 'scroll', state.updateBound, state.scrollParents);\n  state.scrollElement = scrollElement;\n  state.eventsEnabled = true;\n  return state;\n}\n/**\n * It will add resize/scroll events and start recalculating\n * position of the popper element when they are triggered.\n * @method\n * @memberof Popper\n */\n\n\nfunction enableEventListeners() {\n  if (!this.state.eventsEnabled) {\n    this.state = setupEventListeners(this.reference, this.options, this.state, this.scheduleUpdate);\n  }\n}\n/**\n * Remove event listeners used to update the popper position\n * @method\n * @memberof Popper.Utils\n * @private\n */\n\n\nfunction removeEventListeners(reference, state) {\n  // Remove resize event listener on window\n  getWindow(reference).removeEventListener('resize', state.updateBound); // Remove scroll event listener on scroll parents\n\n  state.scrollParents.forEach(function (target) {\n    target.removeEventListener('scroll', state.updateBound);\n  }); // Reset state\n\n  state.updateBound = null;\n  state.scrollParents = [];\n  state.scrollElement = null;\n  state.eventsEnabled = false;\n  return state;\n}\n/**\n * It will remove resize/scroll events and won't recalculate popper position\n * when they are triggered. It also won't trigger `onUpdate` callback anymore,\n * unless you call `update` method manually.\n * @method\n * @memberof Popper\n */\n\n\nfunction disableEventListeners() {\n  if (this.state.eventsEnabled) {\n    cancelAnimationFrame(this.scheduleUpdate);\n    this.state = removeEventListeners(this.reference, this.state);\n  }\n}\n/**\n * Tells if a given input is a number\n * @method\n * @memberof Popper.Utils\n * @param {*} input to check\n * @return {Boolean}\n */\n\n\nfunction isNumeric(n) {\n  return n !== '' && !isNaN(parseFloat(n)) && isFinite(n);\n}\n/**\n * Set the style to the given popper\n * @method\n * @memberof Popper.Utils\n * @argument {Element} element - Element to apply the style to\n * @argument {Object} styles\n * Object with a list of properties and values which will be applied to the element\n */\n\n\nfunction setStyles(element, styles) {\n  Object.keys(styles).forEach(function (prop) {\n    var unit = ''; // add unit if the value is numeric and is one of the following\n\n    if (['width', 'height', 'top', 'right', 'bottom', 'left'].indexOf(prop) !== -1 && isNumeric(styles[prop])) {\n      unit = 'px';\n    }\n\n    element.style[prop] = styles[prop] + unit;\n  });\n}\n/**\n * Set the attributes to the given popper\n * @method\n * @memberof Popper.Utils\n * @argument {Element} element - Element to apply the attributes to\n * @argument {Object} styles\n * Object with a list of properties and values which will be applied to the element\n */\n\n\nfunction setAttributes(element, attributes) {\n  Object.keys(attributes).forEach(function (prop) {\n    var value = attributes[prop];\n\n    if (value !== false) {\n      element.setAttribute(prop, attributes[prop]);\n    } else {\n      element.removeAttribute(prop);\n    }\n  });\n}\n/**\n * @function\n * @memberof Modifiers\n * @argument {Object} data - The data object generated by `update` method\n * @argument {Object} data.styles - List of style properties - values to apply to popper element\n * @argument {Object} data.attributes - List of attribute properties - values to apply to popper element\n * @argument {Object} options - Modifiers configuration and options\n * @returns {Object} The same data object\n */\n\n\nfunction applyStyle(data) {\n  // any property present in `data.styles` will be applied to the popper,\n  // in this way we can make the 3rd party modifiers add custom styles to it\n  // Be aware, modifiers could override the properties defined in the previous\n  // lines of this modifier!\n  setStyles(data.instance.popper, data.styles); // any property present in `data.attributes` will be applied to the popper,\n  // they will be set as HTML attributes of the element\n\n  setAttributes(data.instance.popper, data.attributes); // if arrowElement is defined and arrowStyles has some properties\n\n  if (data.arrowElement && Object.keys(data.arrowStyles).length) {\n    setStyles(data.arrowElement, data.arrowStyles);\n  }\n\n  return data;\n}\n/**\n * Set the x-placement attribute before everything else because it could be used\n * to add margins to the popper margins needs to be calculated to get the\n * correct popper offsets.\n * @method\n * @memberof Popper.modifiers\n * @param {HTMLElement} reference - The reference element used to position the popper\n * @param {HTMLElement} popper - The HTML element used as popper\n * @param {Object} options - Popper.js options\n */\n\n\nfunction applyStyleOnLoad(reference, popper, options, modifierOptions, state) {\n  // compute reference element offsets\n  var referenceOffsets = getReferenceOffsets(state, popper, reference, options.positionFixed); // compute auto placement, store placement inside the data object,\n  // modifiers will be able to edit `placement` if needed\n  // and refer to originalPlacement to know the original value\n\n  var placement = computeAutoPlacement(options.placement, referenceOffsets, popper, reference, options.modifiers.flip.boundariesElement, options.modifiers.flip.padding);\n  popper.setAttribute('x-placement', placement); // Apply `position` to popper before anything else because\n  // without the position applied we can't guarantee correct computations\n\n  setStyles(popper, {\n    position: options.positionFixed ? 'fixed' : 'absolute'\n  });\n  return options;\n}\n/**\n * @function\n * @memberof Popper.Utils\n * @argument {Object} data - The data object generated by `update` method\n * @argument {Boolean} shouldRound - If the offsets should be rounded at all\n * @returns {Object} The popper's position offsets rounded\n *\n * The tale of pixel-perfect positioning. It's still not 100% perfect, but as\n * good as it can be within reason.\n * Discussion here: https://github.com/FezVrasta/popper.js/pull/715\n *\n * Low DPI screens cause a popper to be blurry if not using full pixels (Safari\n * as well on High DPI screens).\n *\n * Firefox prefers no rounding for positioning and does not have blurriness on\n * high DPI screens.\n *\n * Only horizontal placement and left/right values need to be considered.\n */\n\n\nfunction getRoundedOffsets(data, shouldRound) {\n  var _data$offsets = data.offsets,\n      popper = _data$offsets.popper,\n      reference = _data$offsets.reference;\n  var round = Math.round,\n      floor = Math.floor;\n\n  var noRound = function noRound(v) {\n    return v;\n  };\n\n  var referenceWidth = round(reference.width);\n  var popperWidth = round(popper.width);\n  var isVertical = ['left', 'right'].indexOf(data.placement) !== -1;\n  var isVariation = data.placement.indexOf('-') !== -1;\n  var sameWidthParity = referenceWidth % 2 === popperWidth % 2;\n  var bothOddWidth = referenceWidth % 2 === 1 && popperWidth % 2 === 1;\n  var horizontalToInteger = !shouldRound ? noRound : isVertical || isVariation || sameWidthParity ? round : floor;\n  var verticalToInteger = !shouldRound ? noRound : round;\n  return {\n    left: horizontalToInteger(bothOddWidth && !isVariation && shouldRound ? popper.left - 1 : popper.left),\n    top: verticalToInteger(popper.top),\n    bottom: verticalToInteger(popper.bottom),\n    right: horizontalToInteger(popper.right)\n  };\n}\n\nvar isFirefox = isBrowser && /Firefox/i.test(navigator.userAgent);\n/**\n * @function\n * @memberof Modifiers\n * @argument {Object} data - The data object generated by `update` method\n * @argument {Object} options - Modifiers configuration and options\n * @returns {Object} The data object, properly modified\n */\n\nfunction computeStyle(data, options) {\n  var x = options.x,\n      y = options.y;\n  var popper = data.offsets.popper; // Remove this legacy support in Popper.js v2\n\n  var legacyGpuAccelerationOption = find(data.instance.modifiers, function (modifier) {\n    return modifier.name === 'applyStyle';\n  }).gpuAcceleration;\n\n  if (legacyGpuAccelerationOption !== undefined) {\n    console.warn('WARNING: `gpuAcceleration` option moved to `computeStyle` modifier and will not be supported in future versions of Popper.js!');\n  }\n\n  var gpuAcceleration = legacyGpuAccelerationOption !== undefined ? legacyGpuAccelerationOption : options.gpuAcceleration;\n  var offsetParent = getOffsetParent(data.instance.popper);\n  var offsetParentRect = getBoundingClientRect(offsetParent); // Styles\n\n  var styles = {\n    position: popper.position\n  };\n  var offsets = getRoundedOffsets(data, window.devicePixelRatio < 2 || !isFirefox);\n  var sideA = x === 'bottom' ? 'top' : 'bottom';\n  var sideB = y === 'right' ? 'left' : 'right'; // if gpuAcceleration is set to `true` and transform is supported,\n  //  we use `translate3d` to apply the position to the popper we\n  // automatically use the supported prefixed version if needed\n\n  var prefixedProperty = getSupportedPropertyName('transform'); // now, let's make a step back and look at this code closely (wtf?)\n  // If the content of the popper grows once it's been positioned, it\n  // may happen that the popper gets misplaced because of the new content\n  // overflowing its reference element\n  // To avoid this problem, we provide two options (x and y), which allow\n  // the consumer to define the offset origin.\n  // If we position a popper on top of a reference element, we can set\n  // `x` to `top` to make the popper grow towards its top instead of\n  // its bottom.\n\n  var left = void 0,\n      top = void 0;\n\n  if (sideA === 'bottom') {\n    // when offsetParent is <html> the positioning is relative to the bottom of the screen (excluding the scrollbar)\n    // and not the bottom of the html element\n    if (offsetParent.nodeName === 'HTML') {\n      top = -offsetParent.clientHeight + offsets.bottom;\n    } else {\n      top = -offsetParentRect.height + offsets.bottom;\n    }\n  } else {\n    top = offsets.top;\n  }\n\n  if (sideB === 'right') {\n    if (offsetParent.nodeName === 'HTML') {\n      left = -offsetParent.clientWidth + offsets.right;\n    } else {\n      left = -offsetParentRect.width + offsets.right;\n    }\n  } else {\n    left = offsets.left;\n  }\n\n  if (gpuAcceleration && prefixedProperty) {\n    styles[prefixedProperty] = 'translate3d(' + left + 'px, ' + top + 'px, 0)';\n    styles[sideA] = 0;\n    styles[sideB] = 0;\n    styles.willChange = 'transform';\n  } else {\n    // othwerise, we use the standard `top`, `left`, `bottom` and `right` properties\n    var invertTop = sideA === 'bottom' ? -1 : 1;\n    var invertLeft = sideB === 'right' ? -1 : 1;\n    styles[sideA] = top * invertTop;\n    styles[sideB] = left * invertLeft;\n    styles.willChange = sideA + ', ' + sideB;\n  } // Attributes\n\n\n  var attributes = {\n    'x-placement': data.placement\n  }; // Update `data` attributes, styles and arrowStyles\n\n  data.attributes = _extends({}, attributes, data.attributes);\n  data.styles = _extends({}, styles, data.styles);\n  data.arrowStyles = _extends({}, data.offsets.arrow, data.arrowStyles);\n  return data;\n}\n/**\n * Helper used to know if the given modifier depends from another one.<br />\n * It checks if the needed modifier is listed and enabled.\n * @method\n * @memberof Popper.Utils\n * @param {Array} modifiers - list of modifiers\n * @param {String} requestingName - name of requesting modifier\n * @param {String} requestedName - name of requested modifier\n * @returns {Boolean}\n */\n\n\nfunction isModifierRequired(modifiers, requestingName, requestedName) {\n  var requesting = find(modifiers, function (_ref) {\n    var name = _ref.name;\n    return name === requestingName;\n  });\n  var isRequired = !!requesting && modifiers.some(function (modifier) {\n    return modifier.name === requestedName && modifier.enabled && modifier.order < requesting.order;\n  });\n\n  if (!isRequired) {\n    var _requesting = '`' + requestingName + '`';\n\n    var requested = '`' + requestedName + '`';\n    console.warn(requested + ' modifier is required by ' + _requesting + ' modifier in order to work, be sure to include it before ' + _requesting + '!');\n  }\n\n  return isRequired;\n}\n/**\n * @function\n * @memberof Modifiers\n * @argument {Object} data - The data object generated by update method\n * @argument {Object} options - Modifiers configuration and options\n * @returns {Object} The data object, properly modified\n */\n\n\nfunction arrow(data, options) {\n  var _data$offsets$arrow; // arrow depends on keepTogether in order to work\n\n\n  if (!isModifierRequired(data.instance.modifiers, 'arrow', 'keepTogether')) {\n    return data;\n  }\n\n  var arrowElement = options.element; // if arrowElement is a string, suppose it's a CSS selector\n\n  if (typeof arrowElement === 'string') {\n    arrowElement = data.instance.popper.querySelector(arrowElement); // if arrowElement is not found, don't run the modifier\n\n    if (!arrowElement) {\n      return data;\n    }\n  } else {\n    // if the arrowElement isn't a query selector we must check that the\n    // provided DOM node is child of its popper node\n    if (!data.instance.popper.contains(arrowElement)) {\n      console.warn('WARNING: `arrow.element` must be child of its popper element!');\n      return data;\n    }\n  }\n\n  var placement = data.placement.split('-')[0];\n  var _data$offsets = data.offsets,\n      popper = _data$offsets.popper,\n      reference = _data$offsets.reference;\n  var isVertical = ['left', 'right'].indexOf(placement) !== -1;\n  var len = isVertical ? 'height' : 'width';\n  var sideCapitalized = isVertical ? 'Top' : 'Left';\n  var side = sideCapitalized.toLowerCase();\n  var altSide = isVertical ? 'left' : 'top';\n  var opSide = isVertical ? 'bottom' : 'right';\n  var arrowElementSize = getOuterSizes(arrowElement)[len]; //\n  // extends keepTogether behavior making sure the popper and its\n  // reference have enough pixels in conjunction\n  //\n  // top/left side\n\n  if (reference[opSide] - arrowElementSize < popper[side]) {\n    data.offsets.popper[side] -= popper[side] - (reference[opSide] - arrowElementSize);\n  } // bottom/right side\n\n\n  if (reference[side] + arrowElementSize > popper[opSide]) {\n    data.offsets.popper[side] += reference[side] + arrowElementSize - popper[opSide];\n  }\n\n  data.offsets.popper = getClientRect(data.offsets.popper); // compute center of the popper\n\n  var center = reference[side] + reference[len] / 2 - arrowElementSize / 2; // Compute the sideValue using the updated popper offsets\n  // take popper margin in account because we don't have this info available\n\n  var css = getStyleComputedProperty(data.instance.popper);\n  var popperMarginSide = parseFloat(css['margin' + sideCapitalized]);\n  var popperBorderSide = parseFloat(css['border' + sideCapitalized + 'Width']);\n  var sideValue = center - data.offsets.popper[side] - popperMarginSide - popperBorderSide; // prevent arrowElement from being placed not contiguously to its popper\n\n  sideValue = Math.max(Math.min(popper[len] - arrowElementSize, sideValue), 0);\n  data.arrowElement = arrowElement;\n  data.offsets.arrow = (_data$offsets$arrow = {}, defineProperty(_data$offsets$arrow, side, Math.round(sideValue)), defineProperty(_data$offsets$arrow, altSide, ''), _data$offsets$arrow);\n  return data;\n}\n/**\n * Get the opposite placement variation of the given one\n * @method\n * @memberof Popper.Utils\n * @argument {String} placement variation\n * @returns {String} flipped placement variation\n */\n\n\nfunction getOppositeVariation(variation) {\n  if (variation === 'end') {\n    return 'start';\n  } else if (variation === 'start') {\n    return 'end';\n  }\n\n  return variation;\n}\n/**\n * List of accepted placements to use as values of the `placement` option.<br />\n * Valid placements are:\n * - `auto`\n * - `top`\n * - `right`\n * - `bottom`\n * - `left`\n *\n * Each placement can have a variation from this list:\n * - `-start`\n * - `-end`\n *\n * Variations are interpreted easily if you think of them as the left to right\n * written languages. Horizontally (`top` and `bottom`), `start` is left and `end`\n * is right.<br />\n * Vertically (`left` and `right`), `start` is top and `end` is bottom.\n *\n * Some valid examples are:\n * - `top-end` (on top of reference, right aligned)\n * - `right-start` (on right of reference, top aligned)\n * - `bottom` (on bottom, centered)\n * - `auto-end` (on the side with more space available, alignment depends by placement)\n *\n * @static\n * @type {Array}\n * @enum {String}\n * @readonly\n * @method placements\n * @memberof Popper\n */\n\n\nvar placements = ['auto-start', 'auto', 'auto-end', 'top-start', 'top', 'top-end', 'right-start', 'right', 'right-end', 'bottom-end', 'bottom', 'bottom-start', 'left-end', 'left', 'left-start']; // Get rid of `auto` `auto-start` and `auto-end`\n\nvar validPlacements = placements.slice(3);\n/**\n * Given an initial placement, returns all the subsequent placements\n * clockwise (or counter-clockwise).\n *\n * @method\n * @memberof Popper.Utils\n * @argument {String} placement - A valid placement (it accepts variations)\n * @argument {Boolean} counter - Set to true to walk the placements counterclockwise\n * @returns {Array} placements including their variations\n */\n\nfunction clockwise(placement) {\n  var counter = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n  var index = validPlacements.indexOf(placement);\n  var arr = validPlacements.slice(index + 1).concat(validPlacements.slice(0, index));\n  return counter ? arr.reverse() : arr;\n}\n\nvar BEHAVIORS = {\n  FLIP: 'flip',\n  CLOCKWISE: 'clockwise',\n  COUNTERCLOCKWISE: 'counterclockwise'\n};\n/**\n * @function\n * @memberof Modifiers\n * @argument {Object} data - The data object generated by update method\n * @argument {Object} options - Modifiers configuration and options\n * @returns {Object} The data object, properly modified\n */\n\nfunction flip(data, options) {\n  // if `inner` modifier is enabled, we can't use the `flip` modifier\n  if (isModifierEnabled(data.instance.modifiers, 'inner')) {\n    return data;\n  }\n\n  if (data.flipped && data.placement === data.originalPlacement) {\n    // seems like flip is trying to loop, probably there's not enough space on any of the flippable sides\n    return data;\n  }\n\n  var boundaries = getBoundaries(data.instance.popper, data.instance.reference, options.padding, options.boundariesElement, data.positionFixed);\n  var placement = data.placement.split('-')[0];\n  var placementOpposite = getOppositePlacement(placement);\n  var variation = data.placement.split('-')[1] || '';\n  var flipOrder = [];\n\n  switch (options.behavior) {\n    case BEHAVIORS.FLIP:\n      flipOrder = [placement, placementOpposite];\n      break;\n\n    case BEHAVIORS.CLOCKWISE:\n      flipOrder = clockwise(placement);\n      break;\n\n    case BEHAVIORS.COUNTERCLOCKWISE:\n      flipOrder = clockwise(placement, true);\n      break;\n\n    default:\n      flipOrder = options.behavior;\n  }\n\n  flipOrder.forEach(function (step, index) {\n    if (placement !== step || flipOrder.length === index + 1) {\n      return data;\n    }\n\n    placement = data.placement.split('-')[0];\n    placementOpposite = getOppositePlacement(placement);\n    var popperOffsets = data.offsets.popper;\n    var refOffsets = data.offsets.reference; // using floor because the reference offsets may contain decimals we are not going to consider here\n\n    var floor = Math.floor;\n    var overlapsRef = placement === 'left' && floor(popperOffsets.right) > floor(refOffsets.left) || placement === 'right' && floor(popperOffsets.left) < floor(refOffsets.right) || placement === 'top' && floor(popperOffsets.bottom) > floor(refOffsets.top) || placement === 'bottom' && floor(popperOffsets.top) < floor(refOffsets.bottom);\n    var overflowsLeft = floor(popperOffsets.left) < floor(boundaries.left);\n    var overflowsRight = floor(popperOffsets.right) > floor(boundaries.right);\n    var overflowsTop = floor(popperOffsets.top) < floor(boundaries.top);\n    var overflowsBottom = floor(popperOffsets.bottom) > floor(boundaries.bottom);\n    var overflowsBoundaries = placement === 'left' && overflowsLeft || placement === 'right' && overflowsRight || placement === 'top' && overflowsTop || placement === 'bottom' && overflowsBottom; // flip the variation if required\n\n    var isVertical = ['top', 'bottom'].indexOf(placement) !== -1; // flips variation if reference element overflows boundaries\n\n    var flippedVariationByRef = !!options.flipVariations && (isVertical && variation === 'start' && overflowsLeft || isVertical && variation === 'end' && overflowsRight || !isVertical && variation === 'start' && overflowsTop || !isVertical && variation === 'end' && overflowsBottom); // flips variation if popper content overflows boundaries\n\n    var flippedVariationByContent = !!options.flipVariationsByContent && (isVertical && variation === 'start' && overflowsRight || isVertical && variation === 'end' && overflowsLeft || !isVertical && variation === 'start' && overflowsBottom || !isVertical && variation === 'end' && overflowsTop);\n    var flippedVariation = flippedVariationByRef || flippedVariationByContent;\n\n    if (overlapsRef || overflowsBoundaries || flippedVariation) {\n      // this boolean to detect any flip loop\n      data.flipped = true;\n\n      if (overlapsRef || overflowsBoundaries) {\n        placement = flipOrder[index + 1];\n      }\n\n      if (flippedVariation) {\n        variation = getOppositeVariation(variation);\n      }\n\n      data.placement = placement + (variation ? '-' + variation : ''); // this object contains `position`, we want to preserve it along with\n      // any additional property we may add in the future\n\n      data.offsets.popper = _extends({}, data.offsets.popper, getPopperOffsets(data.instance.popper, data.offsets.reference, data.placement));\n      data = runModifiers(data.instance.modifiers, data, 'flip');\n    }\n  });\n  return data;\n}\n/**\n * @function\n * @memberof Modifiers\n * @argument {Object} data - The data object generated by update method\n * @argument {Object} options - Modifiers configuration and options\n * @returns {Object} The data object, properly modified\n */\n\n\nfunction keepTogether(data) {\n  var _data$offsets = data.offsets,\n      popper = _data$offsets.popper,\n      reference = _data$offsets.reference;\n  var placement = data.placement.split('-')[0];\n  var floor = Math.floor;\n  var isVertical = ['top', 'bottom'].indexOf(placement) !== -1;\n  var side = isVertical ? 'right' : 'bottom';\n  var opSide = isVertical ? 'left' : 'top';\n  var measurement = isVertical ? 'width' : 'height';\n\n  if (popper[side] < floor(reference[opSide])) {\n    data.offsets.popper[opSide] = floor(reference[opSide]) - popper[measurement];\n  }\n\n  if (popper[opSide] > floor(reference[side])) {\n    data.offsets.popper[opSide] = floor(reference[side]);\n  }\n\n  return data;\n}\n/**\n * Converts a string containing value + unit into a px value number\n * @function\n * @memberof {modifiers~offset}\n * @private\n * @argument {String} str - Value + unit string\n * @argument {String} measurement - `height` or `width`\n * @argument {Object} popperOffsets\n * @argument {Object} referenceOffsets\n * @returns {Number|String}\n * Value in pixels, or original string if no values were extracted\n */\n\n\nfunction toValue(str, measurement, popperOffsets, referenceOffsets) {\n  // separate value from unit\n  var split = str.match(/((?:\\-|\\+)?\\d*\\.?\\d*)(.*)/);\n  var value = +split[1];\n  var unit = split[2]; // If it's not a number it's an operator, I guess\n\n  if (!value) {\n    return str;\n  }\n\n  if (unit.indexOf('%') === 0) {\n    var element = void 0;\n\n    switch (unit) {\n      case '%p':\n        element = popperOffsets;\n        break;\n\n      case '%':\n      case '%r':\n      default:\n        element = referenceOffsets;\n    }\n\n    var rect = getClientRect(element);\n    return rect[measurement] / 100 * value;\n  } else if (unit === 'vh' || unit === 'vw') {\n    // if is a vh or vw, we calculate the size based on the viewport\n    var size = void 0;\n\n    if (unit === 'vh') {\n      size = Math.max(document.documentElement.clientHeight, window.innerHeight || 0);\n    } else {\n      size = Math.max(document.documentElement.clientWidth, window.innerWidth || 0);\n    }\n\n    return size / 100 * value;\n  } else {\n    // if is an explicit pixel unit, we get rid of the unit and keep the value\n    // if is an implicit unit, it's px, and we return just the value\n    return value;\n  }\n}\n/**\n * Parse an `offset` string to extrapolate `x` and `y` numeric offsets.\n * @function\n * @memberof {modifiers~offset}\n * @private\n * @argument {String} offset\n * @argument {Object} popperOffsets\n * @argument {Object} referenceOffsets\n * @argument {String} basePlacement\n * @returns {Array} a two cells array with x and y offsets in numbers\n */\n\n\nfunction parseOffset(offset, popperOffsets, referenceOffsets, basePlacement) {\n  var offsets = [0, 0]; // Use height if placement is left or right and index is 0 otherwise use width\n  // in this way the first offset will use an axis and the second one\n  // will use the other one\n\n  var useHeight = ['right', 'left'].indexOf(basePlacement) !== -1; // Split the offset string to obtain a list of values and operands\n  // The regex addresses values with the plus or minus sign in front (+10, -20, etc)\n\n  var fragments = offset.split(/(\\+|\\-)/).map(function (frag) {\n    return frag.trim();\n  }); // Detect if the offset string contains a pair of values or a single one\n  // they could be separated by comma or space\n\n  var divider = fragments.indexOf(find(fragments, function (frag) {\n    return frag.search(/,|\\s/) !== -1;\n  }));\n\n  if (fragments[divider] && fragments[divider].indexOf(',') === -1) {\n    console.warn('Offsets separated by white space(s) are deprecated, use a comma (,) instead.');\n  } // If divider is found, we divide the list of values and operands to divide\n  // them by ofset X and Y.\n\n\n  var splitRegex = /\\s*,\\s*|\\s+/;\n  var ops = divider !== -1 ? [fragments.slice(0, divider).concat([fragments[divider].split(splitRegex)[0]]), [fragments[divider].split(splitRegex)[1]].concat(fragments.slice(divider + 1))] : [fragments]; // Convert the values with units to absolute pixels to allow our computations\n\n  ops = ops.map(function (op, index) {\n    // Most of the units rely on the orientation of the popper\n    var measurement = (index === 1 ? !useHeight : useHeight) ? 'height' : 'width';\n    var mergeWithPrevious = false;\n    return op // This aggregates any `+` or `-` sign that aren't considered operators\n    // e.g.: 10 + +5 => [10, +, +5]\n    .reduce(function (a, b) {\n      if (a[a.length - 1] === '' && ['+', '-'].indexOf(b) !== -1) {\n        a[a.length - 1] = b;\n        mergeWithPrevious = true;\n        return a;\n      } else if (mergeWithPrevious) {\n        a[a.length - 1] += b;\n        mergeWithPrevious = false;\n        return a;\n      } else {\n        return a.concat(b);\n      }\n    }, []) // Here we convert the string values into number values (in px)\n    .map(function (str) {\n      return toValue(str, measurement, popperOffsets, referenceOffsets);\n    });\n  }); // Loop trough the offsets arrays and execute the operations\n\n  ops.forEach(function (op, index) {\n    op.forEach(function (frag, index2) {\n      if (isNumeric(frag)) {\n        offsets[index] += frag * (op[index2 - 1] === '-' ? -1 : 1);\n      }\n    });\n  });\n  return offsets;\n}\n/**\n * @function\n * @memberof Modifiers\n * @argument {Object} data - The data object generated by update method\n * @argument {Object} options - Modifiers configuration and options\n * @argument {Number|String} options.offset=0\n * The offset value as described in the modifier description\n * @returns {Object} The data object, properly modified\n */\n\n\nfunction offset(data, _ref) {\n  var offset = _ref.offset;\n  var placement = data.placement,\n      _data$offsets = data.offsets,\n      popper = _data$offsets.popper,\n      reference = _data$offsets.reference;\n  var basePlacement = placement.split('-')[0];\n  var offsets = void 0;\n\n  if (isNumeric(+offset)) {\n    offsets = [+offset, 0];\n  } else {\n    offsets = parseOffset(offset, popper, reference, basePlacement);\n  }\n\n  if (basePlacement === 'left') {\n    popper.top += offsets[0];\n    popper.left -= offsets[1];\n  } else if (basePlacement === 'right') {\n    popper.top += offsets[0];\n    popper.left += offsets[1];\n  } else if (basePlacement === 'top') {\n    popper.left += offsets[0];\n    popper.top -= offsets[1];\n  } else if (basePlacement === 'bottom') {\n    popper.left += offsets[0];\n    popper.top += offsets[1];\n  }\n\n  data.popper = popper;\n  return data;\n}\n/**\n * @function\n * @memberof Modifiers\n * @argument {Object} data - The data object generated by `update` method\n * @argument {Object} options - Modifiers configuration and options\n * @returns {Object} The data object, properly modified\n */\n\n\nfunction preventOverflow(data, options) {\n  var boundariesElement = options.boundariesElement || getOffsetParent(data.instance.popper); // If offsetParent is the reference element, we really want to\n  // go one step up and use the next offsetParent as reference to\n  // avoid to make this modifier completely useless and look like broken\n\n  if (data.instance.reference === boundariesElement) {\n    boundariesElement = getOffsetParent(boundariesElement);\n  } // NOTE: DOM access here\n  // resets the popper's position so that the document size can be calculated excluding\n  // the size of the popper element itself\n\n\n  var transformProp = getSupportedPropertyName('transform');\n  var popperStyles = data.instance.popper.style; // assignment to help minification\n\n  var top = popperStyles.top,\n      left = popperStyles.left,\n      transform = popperStyles[transformProp];\n  popperStyles.top = '';\n  popperStyles.left = '';\n  popperStyles[transformProp] = '';\n  var boundaries = getBoundaries(data.instance.popper, data.instance.reference, options.padding, boundariesElement, data.positionFixed); // NOTE: DOM access here\n  // restores the original style properties after the offsets have been computed\n\n  popperStyles.top = top;\n  popperStyles.left = left;\n  popperStyles[transformProp] = transform;\n  options.boundaries = boundaries;\n  var order = options.priority;\n  var popper = data.offsets.popper;\n  var check = {\n    primary: function primary(placement) {\n      var value = popper[placement];\n\n      if (popper[placement] < boundaries[placement] && !options.escapeWithReference) {\n        value = Math.max(popper[placement], boundaries[placement]);\n      }\n\n      return defineProperty({}, placement, value);\n    },\n    secondary: function secondary(placement) {\n      var mainSide = placement === 'right' ? 'left' : 'top';\n      var value = popper[mainSide];\n\n      if (popper[placement] > boundaries[placement] && !options.escapeWithReference) {\n        value = Math.min(popper[mainSide], boundaries[placement] - (placement === 'right' ? popper.width : popper.height));\n      }\n\n      return defineProperty({}, mainSide, value);\n    }\n  };\n  order.forEach(function (placement) {\n    var side = ['left', 'top'].indexOf(placement) !== -1 ? 'primary' : 'secondary';\n    popper = _extends({}, popper, check[side](placement));\n  });\n  data.offsets.popper = popper;\n  return data;\n}\n/**\n * @function\n * @memberof Modifiers\n * @argument {Object} data - The data object generated by `update` method\n * @argument {Object} options - Modifiers configuration and options\n * @returns {Object} The data object, properly modified\n */\n\n\nfunction shift(data) {\n  var placement = data.placement;\n  var basePlacement = placement.split('-')[0];\n  var shiftvariation = placement.split('-')[1]; // if shift shiftvariation is specified, run the modifier\n\n  if (shiftvariation) {\n    var _data$offsets = data.offsets,\n        reference = _data$offsets.reference,\n        popper = _data$offsets.popper;\n    var isVertical = ['bottom', 'top'].indexOf(basePlacement) !== -1;\n    var side = isVertical ? 'left' : 'top';\n    var measurement = isVertical ? 'width' : 'height';\n    var shiftOffsets = {\n      start: defineProperty({}, side, reference[side]),\n      end: defineProperty({}, side, reference[side] + reference[measurement] - popper[measurement])\n    };\n    data.offsets.popper = _extends({}, popper, shiftOffsets[shiftvariation]);\n  }\n\n  return data;\n}\n/**\n * @function\n * @memberof Modifiers\n * @argument {Object} data - The data object generated by update method\n * @argument {Object} options - Modifiers configuration and options\n * @returns {Object} The data object, properly modified\n */\n\n\nfunction hide(data) {\n  if (!isModifierRequired(data.instance.modifiers, 'hide', 'preventOverflow')) {\n    return data;\n  }\n\n  var refRect = data.offsets.reference;\n  var bound = find(data.instance.modifiers, function (modifier) {\n    return modifier.name === 'preventOverflow';\n  }).boundaries;\n\n  if (refRect.bottom < bound.top || refRect.left > bound.right || refRect.top > bound.bottom || refRect.right < bound.left) {\n    // Avoid unnecessary DOM access if visibility hasn't changed\n    if (data.hide === true) {\n      return data;\n    }\n\n    data.hide = true;\n    data.attributes['x-out-of-boundaries'] = '';\n  } else {\n    // Avoid unnecessary DOM access if visibility hasn't changed\n    if (data.hide === false) {\n      return data;\n    }\n\n    data.hide = false;\n    data.attributes['x-out-of-boundaries'] = false;\n  }\n\n  return data;\n}\n/**\n * @function\n * @memberof Modifiers\n * @argument {Object} data - The data object generated by `update` method\n * @argument {Object} options - Modifiers configuration and options\n * @returns {Object} The data object, properly modified\n */\n\n\nfunction inner(data) {\n  var placement = data.placement;\n  var basePlacement = placement.split('-')[0];\n  var _data$offsets = data.offsets,\n      popper = _data$offsets.popper,\n      reference = _data$offsets.reference;\n  var isHoriz = ['left', 'right'].indexOf(basePlacement) !== -1;\n  var subtractLength = ['top', 'left'].indexOf(basePlacement) === -1;\n  popper[isHoriz ? 'left' : 'top'] = reference[basePlacement] - (subtractLength ? popper[isHoriz ? 'width' : 'height'] : 0);\n  data.placement = getOppositePlacement(placement);\n  data.offsets.popper = getClientRect(popper);\n  return data;\n}\n/**\n * Modifier function, each modifier can have a function of this type assigned\n * to its `fn` property.<br />\n * These functions will be called on each update, this means that you must\n * make sure they are performant enough to avoid performance bottlenecks.\n *\n * @function ModifierFn\n * @argument {dataObject} data - The data object generated by `update` method\n * @argument {Object} options - Modifiers configuration and options\n * @returns {dataObject} The data object, properly modified\n */\n\n/**\n * Modifiers are plugins used to alter the behavior of your poppers.<br />\n * Popper.js uses a set of 9 modifiers to provide all the basic functionalities\n * needed by the library.\n *\n * Usually you don't want to override the `order`, `fn` and `onLoad` props.\n * All the other properties are configurations that could be tweaked.\n * @namespace modifiers\n */\n\n\nvar modifiers = {\n  /**\n   * Modifier used to shift the popper on the start or end of its reference\n   * element.<br />\n   * It will read the variation of the `placement` property.<br />\n   * It can be one either `-end` or `-start`.\n   * @memberof modifiers\n   * @inner\n   */\n  shift: {\n    /** @prop {number} order=100 - Index used to define the order of execution */\n    order: 100,\n\n    /** @prop {Boolean} enabled=true - Whether the modifier is enabled or not */\n    enabled: true,\n\n    /** @prop {ModifierFn} */\n    fn: shift\n  },\n\n  /**\n   * The `offset` modifier can shift your popper on both its axis.\n   *\n   * It accepts the following units:\n   * - `px` or unit-less, interpreted as pixels\n   * - `%` or `%r`, percentage relative to the length of the reference element\n   * - `%p`, percentage relative to the length of the popper element\n   * - `vw`, CSS viewport width unit\n   * - `vh`, CSS viewport height unit\n   *\n   * For length is intended the main axis relative to the placement of the popper.<br />\n   * This means that if the placement is `top` or `bottom`, the length will be the\n   * `width`. In case of `left` or `right`, it will be the `height`.\n   *\n   * You can provide a single value (as `Number` or `String`), or a pair of values\n   * as `String` divided by a comma or one (or more) white spaces.<br />\n   * The latter is a deprecated method because it leads to confusion and will be\n   * removed in v2.<br />\n   * Additionally, it accepts additions and subtractions between different units.\n   * Note that multiplications and divisions aren't supported.\n   *\n   * Valid examples are:\n   * ```\n   * 10\n   * '10%'\n   * '10, 10'\n   * '10%, 10'\n   * '10 + 10%'\n   * '10 - 5vh + 3%'\n   * '-10px + 5vh, 5px - 6%'\n   * ```\n   * > **NB**: If you desire to apply offsets to your poppers in a way that may make them overlap\n   * > with their reference element, unfortunately, you will have to disable the `flip` modifier.\n   * > You can read more on this at this [issue](https://github.com/FezVrasta/popper.js/issues/373).\n   *\n   * @memberof modifiers\n   * @inner\n   */\n  offset: {\n    /** @prop {number} order=200 - Index used to define the order of execution */\n    order: 200,\n\n    /** @prop {Boolean} enabled=true - Whether the modifier is enabled or not */\n    enabled: true,\n\n    /** @prop {ModifierFn} */\n    fn: offset,\n\n    /** @prop {Number|String} offset=0\n     * The offset value as described in the modifier description\n     */\n    offset: 0\n  },\n\n  /**\n   * Modifier used to prevent the popper from being positioned outside the boundary.\n   *\n   * A scenario exists where the reference itself is not within the boundaries.<br />\n   * We can say it has \"escaped the boundaries\" — or just \"escaped\".<br />\n   * In this case we need to decide whether the popper should either:\n   *\n   * - detach from the reference and remain \"trapped\" in the boundaries, or\n   * - if it should ignore the boundary and \"escape with its reference\"\n   *\n   * When `escapeWithReference` is set to`true` and reference is completely\n   * outside its boundaries, the popper will overflow (or completely leave)\n   * the boundaries in order to remain attached to the edge of the reference.\n   *\n   * @memberof modifiers\n   * @inner\n   */\n  preventOverflow: {\n    /** @prop {number} order=300 - Index used to define the order of execution */\n    order: 300,\n\n    /** @prop {Boolean} enabled=true - Whether the modifier is enabled or not */\n    enabled: true,\n\n    /** @prop {ModifierFn} */\n    fn: preventOverflow,\n\n    /**\n     * @prop {Array} [priority=['left','right','top','bottom']]\n     * Popper will try to prevent overflow following these priorities by default,\n     * then, it could overflow on the left and on top of the `boundariesElement`\n     */\n    priority: ['left', 'right', 'top', 'bottom'],\n\n    /**\n     * @prop {number} padding=5\n     * Amount of pixel used to define a minimum distance between the boundaries\n     * and the popper. This makes sure the popper always has a little padding\n     * between the edges of its container\n     */\n    padding: 5,\n\n    /**\n     * @prop {String|HTMLElement} boundariesElement='scrollParent'\n     * Boundaries used by the modifier. Can be `scrollParent`, `window`,\n     * `viewport` or any DOM element.\n     */\n    boundariesElement: 'scrollParent'\n  },\n\n  /**\n   * Modifier used to make sure the reference and its popper stay near each other\n   * without leaving any gap between the two. Especially useful when the arrow is\n   * enabled and you want to ensure that it points to its reference element.\n   * It cares only about the first axis. You can still have poppers with margin\n   * between the popper and its reference element.\n   * @memberof modifiers\n   * @inner\n   */\n  keepTogether: {\n    /** @prop {number} order=400 - Index used to define the order of execution */\n    order: 400,\n\n    /** @prop {Boolean} enabled=true - Whether the modifier is enabled or not */\n    enabled: true,\n\n    /** @prop {ModifierFn} */\n    fn: keepTogether\n  },\n\n  /**\n   * This modifier is used to move the `arrowElement` of the popper to make\n   * sure it is positioned between the reference element and its popper element.\n   * It will read the outer size of the `arrowElement` node to detect how many\n   * pixels of conjunction are needed.\n   *\n   * It has no effect if no `arrowElement` is provided.\n   * @memberof modifiers\n   * @inner\n   */\n  arrow: {\n    /** @prop {number} order=500 - Index used to define the order of execution */\n    order: 500,\n\n    /** @prop {Boolean} enabled=true - Whether the modifier is enabled or not */\n    enabled: true,\n\n    /** @prop {ModifierFn} */\n    fn: arrow,\n\n    /** @prop {String|HTMLElement} element='[x-arrow]' - Selector or node used as arrow */\n    element: '[x-arrow]'\n  },\n\n  /**\n   * Modifier used to flip the popper's placement when it starts to overlap its\n   * reference element.\n   *\n   * Requires the `preventOverflow` modifier before it in order to work.\n   *\n   * **NOTE:** this modifier will interrupt the current update cycle and will\n   * restart it if it detects the need to flip the placement.\n   * @memberof modifiers\n   * @inner\n   */\n  flip: {\n    /** @prop {number} order=600 - Index used to define the order of execution */\n    order: 600,\n\n    /** @prop {Boolean} enabled=true - Whether the modifier is enabled or not */\n    enabled: true,\n\n    /** @prop {ModifierFn} */\n    fn: flip,\n\n    /**\n     * @prop {String|Array} behavior='flip'\n     * The behavior used to change the popper's placement. It can be one of\n     * `flip`, `clockwise`, `counterclockwise` or an array with a list of valid\n     * placements (with optional variations)\n     */\n    behavior: 'flip',\n\n    /**\n     * @prop {number} padding=5\n     * The popper will flip if it hits the edges of the `boundariesElement`\n     */\n    padding: 5,\n\n    /**\n     * @prop {String|HTMLElement} boundariesElement='viewport'\n     * The element which will define the boundaries of the popper position.\n     * The popper will never be placed outside of the defined boundaries\n     * (except if `keepTogether` is enabled)\n     */\n    boundariesElement: 'viewport',\n\n    /**\n     * @prop {Boolean} flipVariations=false\n     * The popper will switch placement variation between `-start` and `-end` when\n     * the reference element overlaps its boundaries.\n     *\n     * The original placement should have a set variation.\n     */\n    flipVariations: false,\n\n    /**\n     * @prop {Boolean} flipVariationsByContent=false\n     * The popper will switch placement variation between `-start` and `-end` when\n     * the popper element overlaps its reference boundaries.\n     *\n     * The original placement should have a set variation.\n     */\n    flipVariationsByContent: false\n  },\n\n  /**\n   * Modifier used to make the popper flow toward the inner of the reference element.\n   * By default, when this modifier is disabled, the popper will be placed outside\n   * the reference element.\n   * @memberof modifiers\n   * @inner\n   */\n  inner: {\n    /** @prop {number} order=700 - Index used to define the order of execution */\n    order: 700,\n\n    /** @prop {Boolean} enabled=false - Whether the modifier is enabled or not */\n    enabled: false,\n\n    /** @prop {ModifierFn} */\n    fn: inner\n  },\n\n  /**\n   * Modifier used to hide the popper when its reference element is outside of the\n   * popper boundaries. It will set a `x-out-of-boundaries` attribute which can\n   * be used to hide with a CSS selector the popper when its reference is\n   * out of boundaries.\n   *\n   * Requires the `preventOverflow` modifier before it in order to work.\n   * @memberof modifiers\n   * @inner\n   */\n  hide: {\n    /** @prop {number} order=800 - Index used to define the order of execution */\n    order: 800,\n\n    /** @prop {Boolean} enabled=true - Whether the modifier is enabled or not */\n    enabled: true,\n\n    /** @prop {ModifierFn} */\n    fn: hide\n  },\n\n  /**\n   * Computes the style that will be applied to the popper element to gets\n   * properly positioned.\n   *\n   * Note that this modifier will not touch the DOM, it just prepares the styles\n   * so that `applyStyle` modifier can apply it. This separation is useful\n   * in case you need to replace `applyStyle` with a custom implementation.\n   *\n   * This modifier has `850` as `order` value to maintain backward compatibility\n   * with previous versions of Popper.js. Expect the modifiers ordering method\n   * to change in future major versions of the library.\n   *\n   * @memberof modifiers\n   * @inner\n   */\n  computeStyle: {\n    /** @prop {number} order=850 - Index used to define the order of execution */\n    order: 850,\n\n    /** @prop {Boolean} enabled=true - Whether the modifier is enabled or not */\n    enabled: true,\n\n    /** @prop {ModifierFn} */\n    fn: computeStyle,\n\n    /**\n     * @prop {Boolean} gpuAcceleration=true\n     * If true, it uses the CSS 3D transformation to position the popper.\n     * Otherwise, it will use the `top` and `left` properties\n     */\n    gpuAcceleration: true,\n\n    /**\n     * @prop {string} [x='bottom']\n     * Where to anchor the X axis (`bottom` or `top`). AKA X offset origin.\n     * Change this if your popper should grow in a direction different from `bottom`\n     */\n    x: 'bottom',\n\n    /**\n     * @prop {string} [x='left']\n     * Where to anchor the Y axis (`left` or `right`). AKA Y offset origin.\n     * Change this if your popper should grow in a direction different from `right`\n     */\n    y: 'right'\n  },\n\n  /**\n   * Applies the computed styles to the popper element.\n   *\n   * All the DOM manipulations are limited to this modifier. This is useful in case\n   * you want to integrate Popper.js inside a framework or view library and you\n   * want to delegate all the DOM manipulations to it.\n   *\n   * Note that if you disable this modifier, you must make sure the popper element\n   * has its position set to `absolute` before Popper.js can do its work!\n   *\n   * Just disable this modifier and define your own to achieve the desired effect.\n   *\n   * @memberof modifiers\n   * @inner\n   */\n  applyStyle: {\n    /** @prop {number} order=900 - Index used to define the order of execution */\n    order: 900,\n\n    /** @prop {Boolean} enabled=true - Whether the modifier is enabled or not */\n    enabled: true,\n\n    /** @prop {ModifierFn} */\n    fn: applyStyle,\n\n    /** @prop {Function} */\n    onLoad: applyStyleOnLoad,\n\n    /**\n     * @deprecated since version 1.10.0, the property moved to `computeStyle` modifier\n     * @prop {Boolean} gpuAcceleration=true\n     * If true, it uses the CSS 3D transformation to position the popper.\n     * Otherwise, it will use the `top` and `left` properties\n     */\n    gpuAcceleration: undefined\n  }\n};\n/**\n * The `dataObject` is an object containing all the information used by Popper.js.\n * This object is passed to modifiers and to the `onCreate` and `onUpdate` callbacks.\n * @name dataObject\n * @property {Object} data.instance The Popper.js instance\n * @property {String} data.placement Placement applied to popper\n * @property {String} data.originalPlacement Placement originally defined on init\n * @property {Boolean} data.flipped True if popper has been flipped by flip modifier\n * @property {Boolean} data.hide True if the reference element is out of boundaries, useful to know when to hide the popper\n * @property {HTMLElement} data.arrowElement Node used as arrow by arrow modifier\n * @property {Object} data.styles Any CSS property defined here will be applied to the popper. It expects the JavaScript nomenclature (eg. `marginBottom`)\n * @property {Object} data.arrowStyles Any CSS property defined here will be applied to the popper arrow. It expects the JavaScript nomenclature (eg. `marginBottom`)\n * @property {Object} data.boundaries Offsets of the popper boundaries\n * @property {Object} data.offsets The measurements of popper, reference and arrow elements\n * @property {Object} data.offsets.popper `top`, `left`, `width`, `height` values\n * @property {Object} data.offsets.reference `top`, `left`, `width`, `height` values\n * @property {Object} data.offsets.arrow] `top` and `left` offsets, only one of them will be different from 0\n */\n\n/**\n * Default options provided to Popper.js constructor.<br />\n * These can be overridden using the `options` argument of Popper.js.<br />\n * To override an option, simply pass an object with the same\n * structure of the `options` object, as the 3rd argument. For example:\n * ```\n * new Popper(ref, pop, {\n *   modifiers: {\n *     preventOverflow: { enabled: false }\n *   }\n * })\n * ```\n * @type {Object}\n * @static\n * @memberof Popper\n */\n\nvar Defaults = {\n  /**\n   * Popper's placement.\n   * @prop {Popper.placements} placement='bottom'\n   */\n  placement: 'bottom',\n\n  /**\n   * Set this to true if you want popper to position it self in 'fixed' mode\n   * @prop {Boolean} positionFixed=false\n   */\n  positionFixed: false,\n\n  /**\n   * Whether events (resize, scroll) are initially enabled.\n   * @prop {Boolean} eventsEnabled=true\n   */\n  eventsEnabled: true,\n\n  /**\n   * Set to true if you want to automatically remove the popper when\n   * you call the `destroy` method.\n   * @prop {Boolean} removeOnDestroy=false\n   */\n  removeOnDestroy: false,\n\n  /**\n   * Callback called when the popper is created.<br />\n   * By default, it is set to no-op.<br />\n   * Access Popper.js instance with `data.instance`.\n   * @prop {onCreate}\n   */\n  onCreate: function onCreate() {},\n\n  /**\n   * Callback called when the popper is updated. This callback is not called\n   * on the initialization/creation of the popper, but only on subsequent\n   * updates.<br />\n   * By default, it is set to no-op.<br />\n   * Access Popper.js instance with `data.instance`.\n   * @prop {onUpdate}\n   */\n  onUpdate: function onUpdate() {},\n\n  /**\n   * List of modifiers used to modify the offsets before they are applied to the popper.\n   * They provide most of the functionalities of Popper.js.\n   * @prop {modifiers}\n   */\n  modifiers: modifiers\n};\n/**\n * @callback onCreate\n * @param {dataObject} data\n */\n\n/**\n * @callback onUpdate\n * @param {dataObject} data\n */\n// Utils\n// Methods\n\nvar Popper = function () {\n  /**\n   * Creates a new Popper.js instance.\n   * @class Popper\n   * @param {Element|referenceObject} reference - The reference element used to position the popper\n   * @param {Element} popper - The HTML / XML element used as the popper\n   * @param {Object} options - Your custom options to override the ones defined in [Defaults](#defaults)\n   * @return {Object} instance - The generated Popper.js instance\n   */\n  function Popper(reference, popper) {\n    var _this = this;\n\n    var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n    classCallCheck(this, Popper);\n\n    this.scheduleUpdate = function () {\n      return requestAnimationFrame(_this.update);\n    }; // make update() debounced, so that it only runs at most once-per-tick\n\n\n    this.update = debounce(this.update.bind(this)); // with {} we create a new object with the options inside it\n\n    this.options = _extends({}, Popper.Defaults, options); // init state\n\n    this.state = {\n      isDestroyed: false,\n      isCreated: false,\n      scrollParents: []\n    }; // get reference and popper elements (allow jQuery wrappers)\n\n    this.reference = reference && reference.jquery ? reference[0] : reference;\n    this.popper = popper && popper.jquery ? popper[0] : popper; // Deep merge modifiers options\n\n    this.options.modifiers = {};\n    Object.keys(_extends({}, Popper.Defaults.modifiers, options.modifiers)).forEach(function (name) {\n      _this.options.modifiers[name] = _extends({}, Popper.Defaults.modifiers[name] || {}, options.modifiers ? options.modifiers[name] : {});\n    }); // Refactoring modifiers' list (Object => Array)\n\n    this.modifiers = Object.keys(this.options.modifiers).map(function (name) {\n      return _extends({\n        name: name\n      }, _this.options.modifiers[name]);\n    }) // sort the modifiers by order\n    .sort(function (a, b) {\n      return a.order - b.order;\n    }); // modifiers have the ability to execute arbitrary code when Popper.js get inited\n    // such code is executed in the same order of its modifier\n    // they could add new properties to their options configuration\n    // BE AWARE: don't add options to `options.modifiers.name` but to `modifierOptions`!\n\n    this.modifiers.forEach(function (modifierOptions) {\n      if (modifierOptions.enabled && isFunction(modifierOptions.onLoad)) {\n        modifierOptions.onLoad(_this.reference, _this.popper, _this.options, modifierOptions, _this.state);\n      }\n    }); // fire the first update to position the popper in the right place\n\n    this.update();\n    var eventsEnabled = this.options.eventsEnabled;\n\n    if (eventsEnabled) {\n      // setup event listeners, they will take care of update the position in specific situations\n      this.enableEventListeners();\n    }\n\n    this.state.eventsEnabled = eventsEnabled;\n  } // We can't use class properties because they don't get listed in the\n  // class prototype and break stuff like Sinon stubs\n\n\n  createClass(Popper, [{\n    key: 'update',\n    value: function update$$1() {\n      return update.call(this);\n    }\n  }, {\n    key: 'destroy',\n    value: function destroy$$1() {\n      return destroy.call(this);\n    }\n  }, {\n    key: 'enableEventListeners',\n    value: function enableEventListeners$$1() {\n      return enableEventListeners.call(this);\n    }\n  }, {\n    key: 'disableEventListeners',\n    value: function disableEventListeners$$1() {\n      return disableEventListeners.call(this);\n    }\n    /**\n     * Schedules an update. It will run on the next UI update available.\n     * @method scheduleUpdate\n     * @memberof Popper\n     */\n\n    /**\n     * Collection of utilities useful when writing custom modifiers.\n     * Starting from version 1.7, this method is available only if you\n     * include `popper-utils.js` before `popper.js`.\n     *\n     * **DEPRECATION**: This way to access PopperUtils is deprecated\n     * and will be removed in v2! Use the PopperUtils module directly instead.\n     * Due to the high instability of the methods contained in Utils, we can't\n     * guarantee them to follow semver. Use them at your own risk!\n     * @static\n     * @private\n     * @type {Object}\n     * @deprecated since version 1.8\n     * @member Utils\n     * @memberof Popper\n     */\n\n  }]);\n  return Popper;\n}();\n/**\n * The `referenceObject` is an object that provides an interface compatible with Popper.js\n * and lets you use it as replacement of a real DOM node.<br />\n * You can use this method to position a popper relatively to a set of coordinates\n * in case you don't have a DOM node to use as reference.\n *\n * ```\n * new Popper(referenceObject, popperNode);\n * ```\n *\n * NB: This feature isn't supported in Internet Explorer 10.\n * @name referenceObject\n * @property {Function} data.getBoundingClientRect\n * A function that returns a set of coordinates compatible with the native `getBoundingClientRect` method.\n * @property {number} data.clientWidth\n * An ES6 getter that will return the width of the virtual reference element.\n * @property {number} data.clientHeight\n * An ES6 getter that will return the height of the virtual reference element.\n */\n\n\nPopper.Utils = (typeof window !== 'undefined' ? window : global).PopperUtils;\nPopper.placements = placements;\nPopper.Defaults = Defaults;\nexport default Popper;","map":{"version":3,"mappings":"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","names":["window","document","navigator","timeoutDuration","longerTimeoutBrowsers","i","length","userAgent","indexOf","microtaskDebounce","fn","called","resolve","then","taskDebounce","scheduled","supportsMicroTasks","isBrowser","Promise","isFunction","functionToCheck","getType","toString","call","getStyleComputedProperty","element","property","nodeType","ownerDocument","defaultView","css","getComputedStyle","getParentNode","nodeName","parentNode","host","getScrollParent","body","overflow","overflowX","overflowY","test","getReferenceNode","reference","referenceNode","isIE11","MSInputMethodContext","documentMode","isIE10","isIE","version","getOffsetParent","documentElement","noOffsetParent","offsetParent","nextElementSibling","isOffsetContainer","firstElementChild","getRoot","node","findCommonOffsetParent","element1","element2","order","compareDocumentPosition","Node","DOCUMENT_POSITION_FOLLOWING","start","end","createRange","commonAncestorContainer","range","contains","element1root","getScroll","upperSide","side","html","scrollingElement","includeScroll","rect","scrollTop","scrollLeft","modifier","subtract","getBordersSize","styles","axis","sideA","sideB","parseFloat","getSize","computedStyle","Math","max","parseInt","getWindowSizes","getClientRect","offsets","left","width","top","height","getBoundingClientRect","bottom","right","e","result","sizes","clientWidth","clientHeight","horizScrollbar","offsetWidth","vertScrollbar","offsetHeight","getOffsetRectRelativeToArbitraryNode","children","parent","runIsIE","isHTML","borderTopWidth","borderLeftWidth","fixedPosition","parentRect","childrenRect","marginTop","marginLeft","scrollParent","getViewportOffsetRectRelativeToArtbitraryNode","relativeOffset","innerWidth","innerHeight","excludeScroll","offset","isFixed","getFixedPositionOffsetParent","parentElement","el","getBoundaries","popper","padding","boundariesElement","boundaries","boundariesNode","isPaddingNumber","getArea","computeAutoPlacement","placement","refRect","rects","sortedAreas","Object","keys","map","key","sort","a","b","area","filteredAreas","filter","computedPlacement","variation","split","getReferenceOffsets","state","commonOffsetParent","getOuterSizes","x","marginBottom","y","marginRight","getOppositePlacement","hash","replace","matched","getPopperOffsets","referenceOffsets","popperOffsets","popperRect","isHoriz","mainSide","secondarySide","measurement","secondaryMeasurement","find","arr","check","Array","prototype","findIndex","prop","value","cur","match","obj","runModifiers","modifiers","data","ends","modifiersToRun","undefined","slice","forEach","warn","enabled","update","isDestroyed","options","positionFixed","flip","position","isCreated","onCreate","onUpdate","isModifierEnabled","modifierName","some","name","getSupportedPropertyName","upperProp","charAt","toUpperCase","prefixes","toCheck","prefix","style","destroy","removeAttribute","willChange","disableEventListeners","removeOnDestroy","removeChild","getWindow","attachToScrollParents","event","callback","scrollParents","isBody","target","addEventListener","passive","push","setupEventListeners","updateBound","scrollElement","eventsEnabled","enableEventListeners","scheduleUpdate","removeEventListeners","removeEventListener","isNumeric","n","isNaN","isFinite","setStyles","unit","setAttributes","attributes","applyStyle","instance","arrowElement","arrowStyles","applyStyleOnLoad","modifierOptions","getRoundedOffsets","shouldRound","round","floor","noRound","v","referenceWidth","popperWidth","isVertical","isVariation","sameWidthParity","bothOddWidth","horizontalToInteger","verticalToInteger","isFirefox","computeStyle","legacyGpuAccelerationOption","gpuAcceleration","devicePixelRatio","offsetParentRect","prefixedProperty","invertTop","invertLeft","_extends","arrow","isModifierRequired","requestingName","requestedName","isRequired","requesting","requested","querySelector","len","sideCapitalized","toLowerCase","altSide","opSide","arrowElementSize","center","popperMarginSide","popperBorderSide","sideValue","min","_data$offsets$arrow","getOppositeVariation","validPlacements","placements","clockwise","index","concat","counter","reverse","BEHAVIORS","flipped","originalPlacement","flipOrder","behavior","FLIP","placementOpposite","CLOCKWISE","COUNTERCLOCKWISE","step","refOffsets","overlapsRef","overflowsLeft","overflowsRight","overflowsTop","overflowsBottom","overflowsBoundaries","flippedVariationByRef","flipVariations","flippedVariationByContent","flipVariationsByContent","flippedVariation","keepTogether","toValue","str","size","parseOffset","basePlacement","fragments","frag","trim","divider","search","splitRegex","ops","op","useHeight","mergeWithPrevious","reduce","index2","_ref","preventOverflow","popperStyles","transform","transformProp","priority","escapeWithReference","shift","shiftvariation","shiftOffsets","hide","bound","inner","subtractLength","Popper","requestAnimationFrame","_this","debounce","bind","Defaults","jquery","onLoad","Utils","global","PopperUtils"],"sources":["C:\\Users\\micha\\Documents\\GitHub\\sklep-planszowki-Bilicki\\node_modules\\popper.js\\src\\utils\\isBrowser.js","C:\\Users\\micha\\Documents\\GitHub\\sklep-planszowki-Bilicki\\node_modules\\popper.js\\src\\utils\\debounce.js","C:\\Users\\micha\\Documents\\GitHub\\sklep-planszowki-Bilicki\\node_modules\\popper.js\\src\\utils\\isFunction.js","C:\\Users\\micha\\Documents\\GitHub\\sklep-planszowki-Bilicki\\node_modules\\popper.js\\src\\utils\\getStyleComputedProperty.js","C:\\Users\\micha\\Documents\\GitHub\\sklep-planszowki-Bilicki\\node_modules\\popper.js\\src\\utils\\getParentNode.js","C:\\Users\\micha\\Documents\\GitHub\\sklep-planszowki-Bilicki\\node_modules\\popper.js\\src\\utils\\getScrollParent.js","C:\\Users\\micha\\Documents\\GitHub\\sklep-planszowki-Bilicki\\node_modules\\popper.js\\src\\utils\\getReferenceNode.js","C:\\Users\\micha\\Documents\\GitHub\\sklep-planszowki-Bilicki\\node_modules\\popper.js\\src\\utils\\isIE.js","C:\\Users\\micha\\Documents\\GitHub\\sklep-planszowki-Bilicki\\node_modules\\popper.js\\src\\utils\\getOffsetParent.js","C:\\Users\\micha\\Documents\\GitHub\\sklep-planszowki-Bilicki\\node_modules\\popper.js\\src\\utils\\isOffsetContainer.js","C:\\Users\\micha\\Documents\\GitHub\\sklep-planszowki-Bilicki\\node_modules\\popper.js\\src\\utils\\getRoot.js","C:\\Users\\micha\\Documents\\GitHub\\sklep-planszowki-Bilicki\\node_modules\\popper.js\\src\\utils\\findCommonOffsetParent.js","C:\\Users\\micha\\Documents\\GitHub\\sklep-planszowki-Bilicki\\node_modules\\popper.js\\src\\utils\\getScroll.js","C:\\Users\\micha\\Documents\\GitHub\\sklep-planszowki-Bilicki\\node_modules\\popper.js\\src\\utils\\includeScroll.js","C:\\Users\\micha\\Documents\\GitHub\\sklep-planszowki-Bilicki\\node_modules\\popper.js\\src\\utils\\getBordersSize.js","C:\\Users\\micha\\Documents\\GitHub\\sklep-planszowki-Bilicki\\node_modules\\popper.js\\src\\utils\\getWindowSizes.js","C:\\Users\\micha\\Documents\\GitHub\\sklep-planszowki-Bilicki\\node_modules\\popper.js\\src\\utils\\getClientRect.js","C:\\Users\\micha\\Documents\\GitHub\\sklep-planszowki-Bilicki\\node_modules\\popper.js\\src\\utils\\getBoundingClientRect.js","C:\\Users\\micha\\Documents\\GitHub\\sklep-planszowki-Bilicki\\node_modules\\popper.js\\src\\utils\\getOffsetRectRelativeToArbitraryNode.js","C:\\Users\\micha\\Documents\\GitHub\\sklep-planszowki-Bilicki\\node_modules\\popper.js\\src\\utils\\getViewportOffsetRectRelativeToArtbitraryNode.js","C:\\Users\\micha\\Documents\\GitHub\\sklep-planszowki-Bilicki\\node_modules\\popper.js\\src\\utils\\isFixed.js","C:\\Users\\micha\\Documents\\GitHub\\sklep-planszowki-Bilicki\\node_modules\\popper.js\\src\\utils\\getFixedPositionOffsetParent.js","C:\\Users\\micha\\Documents\\GitHub\\sklep-planszowki-Bilicki\\node_modules\\popper.js\\src\\utils\\getBoundaries.js","C:\\Users\\micha\\Documents\\GitHub\\sklep-planszowki-Bilicki\\node_modules\\popper.js\\src\\utils\\computeAutoPlacement.js","C:\\Users\\micha\\Documents\\GitHub\\sklep-planszowki-Bilicki\\node_modules\\popper.js\\src\\utils\\getReferenceOffsets.js","C:\\Users\\micha\\Documents\\GitHub\\sklep-planszowki-Bilicki\\node_modules\\popper.js\\src\\utils\\getOuterSizes.js","C:\\Users\\micha\\Documents\\GitHub\\sklep-planszowki-Bilicki\\node_modules\\popper.js\\src\\utils\\getOppositePlacement.js","C:\\Users\\micha\\Documents\\GitHub\\sklep-planszowki-Bilicki\\node_modules\\popper.js\\src\\utils\\getPopperOffsets.js","C:\\Users\\micha\\Documents\\GitHub\\sklep-planszowki-Bilicki\\node_modules\\popper.js\\src\\utils\\find.js","C:\\Users\\micha\\Documents\\GitHub\\sklep-planszowki-Bilicki\\node_modules\\popper.js\\src\\utils\\findIndex.js","C:\\Users\\micha\\Documents\\GitHub\\sklep-planszowki-Bilicki\\node_modules\\popper.js\\src\\utils\\runModifiers.js","C:\\Users\\micha\\Documents\\GitHub\\sklep-planszowki-Bilicki\\node_modules\\popper.js\\src\\methods\\update.js","C:\\Users\\micha\\Documents\\GitHub\\sklep-planszowki-Bilicki\\node_modules\\popper.js\\src\\utils\\isModifierEnabled.js","C:\\Users\\micha\\Documents\\GitHub\\sklep-planszowki-Bilicki\\node_modules\\popper.js\\src\\utils\\getSupportedPropertyName.js","C:\\Users\\micha\\Documents\\GitHub\\sklep-planszowki-Bilicki\\node_modules\\popper.js\\src\\methods\\destroy.js","C:\\Users\\micha\\Documents\\GitHub\\sklep-planszowki-Bilicki\\node_modules\\popper.js\\src\\utils\\getWindow.js","C:\\Users\\micha\\Documents\\GitHub\\sklep-planszowki-Bilicki\\node_modules\\popper.js\\src\\utils\\setupEventListeners.js","C:\\Users\\micha\\Documents\\GitHub\\sklep-planszowki-Bilicki\\node_modules\\popper.js\\src\\methods\\enableEventListeners.js","C:\\Users\\micha\\Documents\\GitHub\\sklep-planszowki-Bilicki\\node_modules\\popper.js\\src\\utils\\removeEventListeners.js","C:\\Users\\micha\\Documents\\GitHub\\sklep-planszowki-Bilicki\\node_modules\\popper.js\\src\\methods\\disableEventListeners.js","C:\\Users\\micha\\Documents\\GitHub\\sklep-planszowki-Bilicki\\node_modules\\popper.js\\src\\utils\\isNumeric.js","C:\\Users\\micha\\Documents\\GitHub\\sklep-planszowki-Bilicki\\node_modules\\popper.js\\src\\utils\\setStyles.js","C:\\Users\\micha\\Documents\\GitHub\\sklep-planszowki-Bilicki\\node_modules\\popper.js\\src\\utils\\setAttributes.js","C:\\Users\\micha\\Documents\\GitHub\\sklep-planszowki-Bilicki\\node_modules\\popper.js\\src\\modifiers\\applyStyle.js","C:\\Users\\micha\\Documents\\GitHub\\sklep-planszowki-Bilicki\\node_modules\\popper.js\\src\\utils\\getRoundedOffsets.js","C:\\Users\\micha\\Documents\\GitHub\\sklep-planszowki-Bilicki\\node_modules\\popper.js\\src\\modifiers\\computeStyle.js","C:\\Users\\micha\\Documents\\GitHub\\sklep-planszowki-Bilicki\\node_modules\\popper.js\\src\\utils\\isModifierRequired.js","C:\\Users\\micha\\Documents\\GitHub\\sklep-planszowki-Bilicki\\node_modules\\popper.js\\src\\modifiers\\arrow.js","C:\\Users\\micha\\Documents\\GitHub\\sklep-planszowki-Bilicki\\node_modules\\popper.js\\src\\utils\\getOppositeVariation.js","C:\\Users\\micha\\Documents\\GitHub\\sklep-planszowki-Bilicki\\node_modules\\popper.js\\src\\methods\\placements.js","C:\\Users\\micha\\Documents\\GitHub\\sklep-planszowki-Bilicki\\node_modules\\popper.js\\src\\utils\\clockwise.js","C:\\Users\\micha\\Documents\\GitHub\\sklep-planszowki-Bilicki\\node_modules\\popper.js\\src\\modifiers\\flip.js","C:\\Users\\micha\\Documents\\GitHub\\sklep-planszowki-Bilicki\\node_modules\\popper.js\\src\\modifiers\\keepTogether.js","C:\\Users\\micha\\Documents\\GitHub\\sklep-planszowki-Bilicki\\node_modules\\popper.js\\src\\modifiers\\offset.js","C:\\Users\\micha\\Documents\\GitHub\\sklep-planszowki-Bilicki\\node_modules\\popper.js\\src\\modifiers\\preventOverflow.js","C:\\Users\\micha\\Documents\\GitHub\\sklep-planszowki-Bilicki\\node_modules\\popper.js\\src\\modifiers\\shift.js","C:\\Users\\micha\\Documents\\GitHub\\sklep-planszowki-Bilicki\\node_modules\\popper.js\\src\\modifiers\\hide.js","C:\\Users\\micha\\Documents\\GitHub\\sklep-planszowki-Bilicki\\node_modules\\popper.js\\src\\modifiers\\inner.js","C:\\Users\\micha\\Documents\\GitHub\\sklep-planszowki-Bilicki\\node_modules\\popper.js\\src\\modifiers\\index.js","C:\\Users\\micha\\Documents\\GitHub\\sklep-planszowki-Bilicki\\node_modules\\popper.js\\src\\methods\\defaults.js","C:\\Users\\micha\\Documents\\GitHub\\sklep-planszowki-Bilicki\\node_modules\\popper.js\\src\\index.js"],"sourcesContent":["export default typeof window !== 'undefined' && typeof document !== 'undefined' && typeof navigator !== 'undefined';\n","import isBrowser from './isBrowser';\n\nconst timeoutDuration = (function(){\n  const longerTimeoutBrowsers = ['Edge', 'Trident', 'Firefox'];\n  for (let i = 0; i < longerTimeoutBrowsers.length; i += 1) {\n    if (isBrowser && navigator.userAgent.indexOf(longerTimeoutBrowsers[i]) >= 0) {\n      return 1;\n    }\n  }\n  return 0;\n}());\n\nexport function microtaskDebounce(fn) {\n  let called = false\n  return () => {\n    if (called) {\n      return\n    }\n    called = true\n    window.Promise.resolve().then(() => {\n      called = false\n      fn()\n    })\n  }\n}\n\nexport function taskDebounce(fn) {\n  let scheduled = false;\n  return () => {\n    if (!scheduled) {\n      scheduled = true;\n      setTimeout(() => {\n        scheduled = false;\n        fn();\n      }, timeoutDuration);\n    }\n  };\n}\n\nconst supportsMicroTasks = isBrowser && window.Promise\n\n\n/**\n* Create a debounced version of a method, that's asynchronously deferred\n* but called in the minimum time possible.\n*\n* @method\n* @memberof Popper.Utils\n* @argument {Function} fn\n* @returns {Function}\n*/\nexport default (supportsMicroTasks\n  ? microtaskDebounce\n  : taskDebounce);\n","/**\n * Check if the given variable is a function\n * @method\n * @memberof Popper.Utils\n * @argument {Any} functionToCheck - variable to check\n * @returns {Boolean} answer to: is a function?\n */\nexport default function isFunction(functionToCheck) {\n  const getType = {};\n  return (\n    functionToCheck &&\n    getType.toString.call(functionToCheck) === '[object Function]'\n  );\n}\n","/**\n * Get CSS computed property of the given element\n * @method\n * @memberof Popper.Utils\n * @argument {Eement} element\n * @argument {String} property\n */\nexport default function getStyleComputedProperty(element, property) {\n  if (element.nodeType !== 1) {\n    return [];\n  }\n  // NOTE: 1 DOM access here\n  const window = element.ownerDocument.defaultView;\n  const css = window.getComputedStyle(element, null);\n  return property ? css[property] : css;\n}\n","/**\n * Returns the parentNode or the host of the element\n * @method\n * @memberof Popper.Utils\n * @argument {Element} element\n * @returns {Element} parent\n */\nexport default function getParentNode(element) {\n  if (element.nodeName === 'HTML') {\n    return element;\n  }\n  return element.parentNode || element.host;\n}\n","import getStyleComputedProperty from './getStyleComputedProperty';\nimport getParentNode from './getParentNode';\n\n/**\n * Returns the scrolling parent of the given element\n * @method\n * @memberof Popper.Utils\n * @argument {Element} element\n * @returns {Element} scroll parent\n */\nexport default function getScrollParent(element) {\n  // Return body, `getScroll` will take care to get the correct `scrollTop` from it\n  if (!element) {\n    return document.body\n  }\n\n  switch (element.nodeName) {\n    case 'HTML':\n    case 'BODY':\n      return element.ownerDocument.body\n    case '#document':\n      return element.body\n  }\n\n  // Firefox want us to check `-x` and `-y` variations as well\n  const { overflow, overflowX, overflowY } = getStyleComputedProperty(element);\n  if (/(auto|scroll|overlay)/.test(overflow + overflowY + overflowX)) {\n    return element;\n  }\n\n  return getScrollParent(getParentNode(element));\n}\n","/**\n * Returns the reference node of the reference object, or the reference object itself.\n * @method\n * @memberof Popper.Utils\n * @param {Element|Object} reference - the reference element (the popper will be relative to this)\n * @returns {Element} parent\n */\nexport default function getReferenceNode(reference) {\n  return reference && reference.referenceNode ? reference.referenceNode : reference;\n}\n","import isBrowser from './isBrowser';\n\nconst isIE11 = isBrowser && !!(window.MSInputMethodContext && document.documentMode);\nconst isIE10 = isBrowser && /MSIE 10/.test(navigator.userAgent);\n\n/**\n * Determines if the browser is Internet Explorer\n * @method\n * @memberof Popper.Utils\n * @param {Number} version to check\n * @returns {Boolean} isIE\n */\nexport default function isIE(version) {\n  if (version === 11) {\n    return isIE11;\n  }\n  if (version === 10) {\n    return isIE10;\n  }\n  return isIE11 || isIE10;\n}\n","import getStyleComputedProperty from './getStyleComputedProperty';\nimport isIE from './isIE';\n/**\n * Returns the offset parent of the given element\n * @method\n * @memberof Popper.Utils\n * @argument {Element} element\n * @returns {Element} offset parent\n */\nexport default function getOffsetParent(element) {\n  if (!element) {\n    return document.documentElement;\n  }\n\n  const noOffsetParent = isIE(10) ? document.body : null;\n\n  // NOTE: 1 DOM access here\n  let offsetParent = element.offsetParent || null;\n  // Skip hidden elements which don't have an offsetParent\n  while (offsetParent === noOffsetParent && element.nextElementSibling) {\n    offsetParent = (element = element.nextElementSibling).offsetParent;\n  }\n\n  const nodeName = offsetParent && offsetParent.nodeName;\n\n  if (!nodeName || nodeName === 'BODY' || nodeName === 'HTML') {\n    return element ? element.ownerDocument.documentElement : document.documentElement;\n  }\n\n  // .offsetParent will return the closest TH, TD or TABLE in case\n  // no offsetParent is present, I hate this job...\n  if (\n    ['TH', 'TD', 'TABLE'].indexOf(offsetParent.nodeName) !== -1 &&\n    getStyleComputedProperty(offsetParent, 'position') === 'static'\n  ) {\n    return getOffsetParent(offsetParent);\n  }\n\n  return offsetParent;\n}\n","import getOffsetParent from './getOffsetParent';\n\nexport default function isOffsetContainer(element) {\n  const { nodeName } = element;\n  if (nodeName === 'BODY') {\n    return false;\n  }\n  return (\n    nodeName === 'HTML' || getOffsetParent(element.firstElementChild) === element\n  );\n}\n","/**\n * Finds the root node (document, shadowDOM root) of the given element\n * @method\n * @memberof Popper.Utils\n * @argument {Element} node\n * @returns {Element} root node\n */\nexport default function getRoot(node) {\n  if (node.parentNode !== null) {\n    return getRoot(node.parentNode);\n  }\n\n  return node;\n}\n","import isOffsetContainer from './isOffsetContainer';\nimport getRoot from './getRoot';\nimport getOffsetParent from './getOffsetParent';\n\n/**\n * Finds the offset parent common to the two provided nodes\n * @method\n * @memberof Popper.Utils\n * @argument {Element} element1\n * @argument {Element} element2\n * @returns {Element} common offset parent\n */\nexport default function findCommonOffsetParent(element1, element2) {\n  // This check is needed to avoid errors in case one of the elements isn't defined for any reason\n  if (!element1 || !element1.nodeType || !element2 || !element2.nodeType) {\n    return document.documentElement;\n  }\n\n  // Here we make sure to give as \"start\" the element that comes first in the DOM\n  const order =\n    element1.compareDocumentPosition(element2) &\n    Node.DOCUMENT_POSITION_FOLLOWING;\n  const start = order ? element1 : element2;\n  const end = order ? element2 : element1;\n\n  // Get common ancestor container\n  const range = document.createRange();\n  range.setStart(start, 0);\n  range.setEnd(end, 0);\n  const { commonAncestorContainer } = range;\n\n  // Both nodes are inside #document\n  if (\n    (element1 !== commonAncestorContainer &&\n      element2 !== commonAncestorContainer) ||\n    start.contains(end)\n  ) {\n    if (isOffsetContainer(commonAncestorContainer)) {\n      return commonAncestorContainer;\n    }\n\n    return getOffsetParent(commonAncestorContainer);\n  }\n\n  // one of the nodes is inside shadowDOM, find which one\n  const element1root = getRoot(element1);\n  if (element1root.host) {\n    return findCommonOffsetParent(element1root.host, element2);\n  } else {\n    return findCommonOffsetParent(element1, getRoot(element2).host);\n  }\n}\n","/**\n * Gets the scroll value of the given element in the given side (top and left)\n * @method\n * @memberof Popper.Utils\n * @argument {Element} element\n * @argument {String} side `top` or `left`\n * @returns {number} amount of scrolled pixels\n */\nexport default function getScroll(element, side = 'top') {\n  const upperSide = side === 'top' ? 'scrollTop' : 'scrollLeft';\n  const nodeName = element.nodeName;\n\n  if (nodeName === 'BODY' || nodeName === 'HTML') {\n    const html = element.ownerDocument.documentElement;\n    const scrollingElement = element.ownerDocument.scrollingElement || html;\n    return scrollingElement[upperSide];\n  }\n\n  return element[upperSide];\n}\n","import getScroll from './getScroll';\n\n/*\n * Sum or subtract the element scroll values (left and top) from a given rect object\n * @method\n * @memberof Popper.Utils\n * @param {Object} rect - Rect object you want to change\n * @param {HTMLElement} element - The element from the function reads the scroll values\n * @param {Boolean} subtract - set to true if you want to subtract the scroll values\n * @return {Object} rect - The modifier rect object\n */\nexport default function includeScroll(rect, element, subtract = false) {\n  const scrollTop = getScroll(element, 'top');\n  const scrollLeft = getScroll(element, 'left');\n  const modifier = subtract ? -1 : 1;\n  rect.top += scrollTop * modifier;\n  rect.bottom += scrollTop * modifier;\n  rect.left += scrollLeft * modifier;\n  rect.right += scrollLeft * modifier;\n  return rect;\n}\n","/*\n * Helper to detect borders of a given element\n * @method\n * @memberof Popper.Utils\n * @param {CSSStyleDeclaration} styles\n * Result of `getStyleComputedProperty` on the given element\n * @param {String} axis - `x` or `y`\n * @return {number} borders - The borders size of the given axis\n */\n\nexport default function getBordersSize(styles, axis) {\n  const sideA = axis === 'x' ? 'Left' : 'Top';\n  const sideB = sideA === 'Left' ? 'Right' : 'Bottom';\n\n  return (\n    parseFloat(styles[`border${sideA}Width`]) +\n    parseFloat(styles[`border${sideB}Width`])\n  );\n}\n","import isIE from './isIE';\n\nfunction getSize(axis, body, html, computedStyle) {\n  return Math.max(\n    body[`offset${axis}`],\n    body[`scroll${axis}`],\n    html[`client${axis}`],\n    html[`offset${axis}`],\n    html[`scroll${axis}`],\n    isIE(10)\n      ? (parseInt(html[`offset${axis}`]) + \n      parseInt(computedStyle[`margin${axis === 'Height' ? 'Top' : 'Left'}`]) + \n      parseInt(computedStyle[`margin${axis === 'Height' ? 'Bottom' : 'Right'}`]))\n    : 0 \n  );\n}\n\nexport default function getWindowSizes(document) {\n  const body = document.body;\n  const html = document.documentElement;\n  const computedStyle = isIE(10) && getComputedStyle(html);\n\n  return {\n    height: getSize('Height', body, html, computedStyle),\n    width: getSize('Width', body, html, computedStyle),\n  };\n}\n","/**\n * Given element offsets, generate an output similar to getBoundingClientRect\n * @method\n * @memberof Popper.Utils\n * @argument {Object} offsets\n * @returns {Object} ClientRect like output\n */\nexport default function getClientRect(offsets) {\n  return {\n    ...offsets,\n    right: offsets.left + offsets.width,\n    bottom: offsets.top + offsets.height,\n  };\n}\n","import getStyleComputedProperty from './getStyleComputedProperty';\nimport getBordersSize from './getBordersSize';\nimport getWindowSizes from './getWindowSizes';\nimport getScroll from './getScroll';\nimport getClientRect from './getClientRect';\nimport isIE from './isIE';\n\n/**\n * Get bounding client rect of given element\n * @method\n * @memberof Popper.Utils\n * @param {HTMLElement} element\n * @return {Object} client rect\n */\nexport default function getBoundingClientRect(element) {\n  let rect = {};\n\n  // IE10 10 FIX: Please, don't ask, the element isn't\n  // considered in DOM in some circumstances...\n  // This isn't reproducible in IE10 compatibility mode of IE11\n  try {\n    if (isIE(10)) {\n      rect = element.getBoundingClientRect();\n      const scrollTop = getScroll(element, 'top');\n      const scrollLeft = getScroll(element, 'left');\n      rect.top += scrollTop;\n      rect.left += scrollLeft;\n      rect.bottom += scrollTop;\n      rect.right += scrollLeft;\n    }\n    else {\n      rect = element.getBoundingClientRect();\n    }\n  }\n  catch(e){}\n\n  const result = {\n    left: rect.left,\n    top: rect.top,\n    width: rect.right - rect.left,\n    height: rect.bottom - rect.top,\n  };\n\n  // subtract scrollbar size from sizes\n  const sizes = element.nodeName === 'HTML' ? getWindowSizes(element.ownerDocument) : {};\n  const width =\n    sizes.width || element.clientWidth || result.width;\n  const height =\n    sizes.height || element.clientHeight || result.height;\n\n  let horizScrollbar = element.offsetWidth - width;\n  let vertScrollbar = element.offsetHeight - height;\n\n  // if an hypothetical scrollbar is detected, we must be sure it's not a `border`\n  // we make this check conditional for performance reasons\n  if (horizScrollbar || vertScrollbar) {\n    const styles = getStyleComputedProperty(element);\n    horizScrollbar -= getBordersSize(styles, 'x');\n    vertScrollbar -= getBordersSize(styles, 'y');\n\n    result.width -= horizScrollbar;\n    result.height -= vertScrollbar;\n  }\n\n  return getClientRect(result);\n}\n","import getStyleComputedProperty from './getStyleComputedProperty';\nimport includeScroll from './includeScroll';\nimport getScrollParent from './getScrollParent';\nimport getBoundingClientRect from './getBoundingClientRect';\nimport runIsIE from './isIE';\nimport getClientRect from './getClientRect';\n\nexport default function getOffsetRectRelativeToArbitraryNode(children, parent, fixedPosition = false) {\n  const isIE10 = runIsIE(10);\n  const isHTML = parent.nodeName === 'HTML';\n  const childrenRect = getBoundingClientRect(children);\n  const parentRect = getBoundingClientRect(parent);\n  const scrollParent = getScrollParent(children);\n\n  const styles = getStyleComputedProperty(parent);\n  const borderTopWidth = parseFloat(styles.borderTopWidth);\n  const borderLeftWidth = parseFloat(styles.borderLeftWidth);\n\n  // In cases where the parent is fixed, we must ignore negative scroll in offset calc\n  if(fixedPosition && isHTML) {\n    parentRect.top = Math.max(parentRect.top, 0);\n    parentRect.left = Math.max(parentRect.left, 0);\n  }\n  let offsets = getClientRect({\n    top: childrenRect.top - parentRect.top - borderTopWidth,\n    left: childrenRect.left - parentRect.left - borderLeftWidth,\n    width: childrenRect.width,\n    height: childrenRect.height,\n  });\n  offsets.marginTop = 0;\n  offsets.marginLeft = 0;\n\n  // Subtract margins of documentElement in case it's being used as parent\n  // we do this only on HTML because it's the only element that behaves\n  // differently when margins are applied to it. The margins are included in\n  // the box of the documentElement, in the other cases not.\n  if (!isIE10 && isHTML) {\n    const marginTop = parseFloat(styles.marginTop);\n    const marginLeft = parseFloat(styles.marginLeft);\n\n    offsets.top -= borderTopWidth - marginTop;\n    offsets.bottom -= borderTopWidth - marginTop;\n    offsets.left -= borderLeftWidth - marginLeft;\n    offsets.right -= borderLeftWidth - marginLeft;\n\n    // Attach marginTop and marginLeft because in some circumstances we may need them\n    offsets.marginTop = marginTop;\n    offsets.marginLeft = marginLeft;\n  }\n\n  if (\n    isIE10 && !fixedPosition\n      ? parent.contains(scrollParent)\n      : parent === scrollParent && scrollParent.nodeName !== 'BODY'\n  ) {\n    offsets = includeScroll(offsets, parent);\n  }\n\n  return offsets;\n}\n","import getOffsetRectRelativeToArbitraryNode from './getOffsetRectRelativeToArbitraryNode';\nimport getScroll from './getScroll';\nimport getClientRect from './getClientRect';\n\nexport default function getViewportOffsetRectRelativeToArtbitraryNode(element, excludeScroll = false) {\n  const html = element.ownerDocument.documentElement;\n  const relativeOffset = getOffsetRectRelativeToArbitraryNode(element, html);\n  const width = Math.max(html.clientWidth, window.innerWidth || 0);\n  const height = Math.max(html.clientHeight, window.innerHeight || 0);\n\n  const scrollTop = !excludeScroll ? getScroll(html) : 0;\n  const scrollLeft = !excludeScroll ? getScroll(html, 'left') : 0;\n\n  const offset = {\n    top: scrollTop - relativeOffset.top + relativeOffset.marginTop,\n    left: scrollLeft - relativeOffset.left + relativeOffset.marginLeft,\n    width,\n    height,\n  };\n\n  return getClientRect(offset);\n}\n","import getStyleComputedProperty from './getStyleComputedProperty';\nimport getParentNode from './getParentNode';\n\n/**\n * Check if the given element is fixed or is inside a fixed parent\n * @method\n * @memberof Popper.Utils\n * @argument {Element} element\n * @argument {Element} customContainer\n * @returns {Boolean} answer to \"isFixed?\"\n */\nexport default function isFixed(element) {\n  const nodeName = element.nodeName;\n  if (nodeName === 'BODY' || nodeName === 'HTML') {\n    return false;\n  }\n  if (getStyleComputedProperty(element, 'position') === 'fixed') {\n    return true;\n  }\n  const parentNode = getParentNode(element);\n  if (!parentNode) {\n    return false;\n  }\n  return isFixed(parentNode);\n}\n","import getStyleComputedProperty from './getStyleComputedProperty';\nimport isIE from './isIE';\n/**\n * Finds the first parent of an element that has a transformed property defined\n * @method\n * @memberof Popper.Utils\n * @argument {Element} element\n * @returns {Element} first transformed parent or documentElement\n */\n\nexport default function getFixedPositionOffsetParent(element) {\n  // This check is needed to avoid errors in case one of the elements isn't defined for any reason\n   if (!element || !element.parentElement || isIE()) {\n    return document.documentElement;\n  }\n  let el = element.parentElement;\n  while (el && getStyleComputedProperty(el, 'transform') === 'none') {\n    el = el.parentElement;\n  }\n  return el || document.documentElement;\n\n}\n","import getScrollParent from './getScrollParent';\nimport getParentNode from './getParentNode';\nimport getReferenceNode from './getReferenceNode';\nimport findCommonOffsetParent from './findCommonOffsetParent';\nimport getOffsetRectRelativeToArbitraryNode from './getOffsetRectRelativeToArbitraryNode';\nimport getViewportOffsetRectRelativeToArtbitraryNode from './getViewportOffsetRectRelativeToArtbitraryNode';\nimport getWindowSizes from './getWindowSizes';\nimport isFixed from './isFixed';\nimport getFixedPositionOffsetParent from './getFixedPositionOffsetParent';\n\n/**\n * Computed the boundaries limits and return them\n * @method\n * @memberof Popper.Utils\n * @param {HTMLElement} popper\n * @param {HTMLElement} reference\n * @param {number} padding\n * @param {HTMLElement} boundariesElement - Element used to define the boundaries\n * @param {Boolean} fixedPosition - Is in fixed position mode\n * @returns {Object} Coordinates of the boundaries\n */\nexport default function getBoundaries(\n  popper,\n  reference,\n  padding,\n  boundariesElement,\n  fixedPosition = false\n) {\n  // NOTE: 1 DOM access here\n\n  let boundaries = { top: 0, left: 0 };\n  const offsetParent = fixedPosition ? getFixedPositionOffsetParent(popper) : findCommonOffsetParent(popper, getReferenceNode(reference));\n\n  // Handle viewport case\n  if (boundariesElement === 'viewport' ) {\n    boundaries = getViewportOffsetRectRelativeToArtbitraryNode(offsetParent, fixedPosition);\n  }\n\n  else {\n    // Handle other cases based on DOM element used as boundaries\n    let boundariesNode;\n    if (boundariesElement === 'scrollParent') {\n      boundariesNode = getScrollParent(getParentNode(reference));\n      if (boundariesNode.nodeName === 'BODY') {\n        boundariesNode = popper.ownerDocument.documentElement;\n      }\n    } else if (boundariesElement === 'window') {\n      boundariesNode = popper.ownerDocument.documentElement;\n    } else {\n      boundariesNode = boundariesElement;\n    }\n\n    const offsets = getOffsetRectRelativeToArbitraryNode(\n      boundariesNode,\n      offsetParent,\n      fixedPosition\n    );\n\n    // In case of HTML, we need a different computation\n    if (boundariesNode.nodeName === 'HTML' && !isFixed(offsetParent)) {\n      const { height, width } = getWindowSizes(popper.ownerDocument);\n      boundaries.top += offsets.top - offsets.marginTop;\n      boundaries.bottom = height + offsets.top;\n      boundaries.left += offsets.left - offsets.marginLeft;\n      boundaries.right = width + offsets.left;\n    } else {\n      // for all the other DOM elements, this one is good\n      boundaries = offsets;\n    }\n  }\n\n  // Add paddings\n  padding = padding || 0;\n  const isPaddingNumber = typeof padding === 'number';\n  boundaries.left += isPaddingNumber ? padding : padding.left || 0; \n  boundaries.top += isPaddingNumber ? padding : padding.top || 0; \n  boundaries.right -= isPaddingNumber ? padding : padding.right || 0; \n  boundaries.bottom -= isPaddingNumber ? padding : padding.bottom || 0; \n\n  return boundaries;\n}\n","import getBoundaries from '../utils/getBoundaries';\n\nfunction getArea({ width, height }) {\n  return width * height;\n}\n\n/**\n * Utility used to transform the `auto` placement to the placement with more\n * available space.\n * @method\n * @memberof Popper.Utils\n * @argument {Object} data - The data object generated by update method\n * @argument {Object} options - Modifiers configuration and options\n * @returns {Object} The data object, properly modified\n */\nexport default function computeAutoPlacement(\n  placement,\n  refRect,\n  popper,\n  reference,\n  boundariesElement,\n  padding = 0\n) {\n  if (placement.indexOf('auto') === -1) {\n    return placement;\n  }\n\n  const boundaries = getBoundaries(\n    popper,\n    reference,\n    padding,\n    boundariesElement\n  );\n\n  const rects = {\n    top: {\n      width: boundaries.width,\n      height: refRect.top - boundaries.top,\n    },\n    right: {\n      width: boundaries.right - refRect.right,\n      height: boundaries.height,\n    },\n    bottom: {\n      width: boundaries.width,\n      height: boundaries.bottom - refRect.bottom,\n    },\n    left: {\n      width: refRect.left - boundaries.left,\n      height: boundaries.height,\n    },\n  };\n\n  const sortedAreas = Object.keys(rects)\n    .map(key => ({\n      key,\n      ...rects[key],\n      area: getArea(rects[key]),\n    }))\n    .sort((a, b) => b.area - a.area);\n\n  const filteredAreas = sortedAreas.filter(\n    ({ width, height }) =>\n      width >= popper.clientWidth && height >= popper.clientHeight\n  );\n\n  const computedPlacement = filteredAreas.length > 0\n    ? filteredAreas[0].key\n    : sortedAreas[0].key;\n\n  const variation = placement.split('-')[1];\n\n  return computedPlacement + (variation ? `-${variation}` : '');\n}\n","import findCommonOffsetParent from './findCommonOffsetParent';\nimport getOffsetRectRelativeToArbitraryNode from './getOffsetRectRelativeToArbitraryNode';\nimport getFixedPositionOffsetParent from './getFixedPositionOffsetParent';\nimport getReferenceNode from './getReferenceNode';\n\n/**\n * Get offsets to the reference element\n * @method\n * @memberof Popper.Utils\n * @param {Object} state\n * @param {Element} popper - the popper element\n * @param {Element} reference - the reference element (the popper will be relative to this)\n * @param {Element} fixedPosition - is in fixed position mode\n * @returns {Object} An object containing the offsets which will be applied to the popper\n */\nexport default function getReferenceOffsets(state, popper, reference, fixedPosition = null) {\n  const commonOffsetParent = fixedPosition ? getFixedPositionOffsetParent(popper) : findCommonOffsetParent(popper, getReferenceNode(reference));\n  return getOffsetRectRelativeToArbitraryNode(reference, commonOffsetParent, fixedPosition);\n}\n","/**\n * Get the outer sizes of the given element (offset size + margins)\n * @method\n * @memberof Popper.Utils\n * @argument {Element} element\n * @returns {Object} object containing width and height properties\n */\nexport default function getOuterSizes(element) {\n  const window = element.ownerDocument.defaultView;\n  const styles = window.getComputedStyle(element);\n  const x = parseFloat(styles.marginTop || 0) + parseFloat(styles.marginBottom || 0);\n  const y = parseFloat(styles.marginLeft || 0) + parseFloat(styles.marginRight || 0);\n  const result = {\n    width: element.offsetWidth + y,\n    height: element.offsetHeight + x,\n  };\n  return result;\n}\n","/**\n * Get the opposite placement of the given one\n * @method\n * @memberof Popper.Utils\n * @argument {String} placement\n * @returns {String} flipped placement\n */\nexport default function getOppositePlacement(placement) {\n  const hash = { left: 'right', right: 'left', bottom: 'top', top: 'bottom' };\n  return placement.replace(/left|right|bottom|top/g, matched => hash[matched]);\n}\n","import getOuterSizes from './getOuterSizes';\nimport getOppositePlacement from './getOppositePlacement';\n\n/**\n * Get offsets to the popper\n * @method\n * @memberof Popper.Utils\n * @param {Object} position - CSS position the Popper will get applied\n * @param {HTMLElement} popper - the popper element\n * @param {Object} referenceOffsets - the reference offsets (the popper will be relative to this)\n * @param {String} placement - one of the valid placement options\n * @returns {Object} popperOffsets - An object containing the offsets which will be applied to the popper\n */\nexport default function getPopperOffsets(popper, referenceOffsets, placement) {\n  placement = placement.split('-')[0];\n\n  // Get popper node sizes\n  const popperRect = getOuterSizes(popper);\n\n  // Add position, width and height to our offsets object\n  const popperOffsets = {\n    width: popperRect.width,\n    height: popperRect.height,\n  };\n\n  // depending by the popper placement we have to compute its offsets slightly differently\n  const isHoriz = ['right', 'left'].indexOf(placement) !== -1;\n  const mainSide = isHoriz ? 'top' : 'left';\n  const secondarySide = isHoriz ? 'left' : 'top';\n  const measurement = isHoriz ? 'height' : 'width';\n  const secondaryMeasurement = !isHoriz ? 'height' : 'width';\n\n  popperOffsets[mainSide] =\n    referenceOffsets[mainSide] +\n    referenceOffsets[measurement] / 2 -\n    popperRect[measurement] / 2;\n  if (placement === secondarySide) {\n    popperOffsets[secondarySide] =\n      referenceOffsets[secondarySide] - popperRect[secondaryMeasurement];\n  } else {\n    popperOffsets[secondarySide] =\n      referenceOffsets[getOppositePlacement(secondarySide)];\n  }\n\n  return popperOffsets;\n}\n","/**\n * Mimics the `find` method of Array\n * @method\n * @memberof Popper.Utils\n * @argument {Array} arr\n * @argument prop\n * @argument value\n * @returns index or -1\n */\nexport default function find(arr, check) {\n  // use native find if supported\n  if (Array.prototype.find) {\n    return arr.find(check);\n  }\n\n  // use `filter` to obtain the same behavior of `find`\n  return arr.filter(check)[0];\n}\n","import find from './find';\n\n/**\n * Return the index of the matching object\n * @method\n * @memberof Popper.Utils\n * @argument {Array} arr\n * @argument prop\n * @argument value\n * @returns index or -1\n */\nexport default function findIndex(arr, prop, value) {\n  // use native findIndex if supported\n  if (Array.prototype.findIndex) {\n    return arr.findIndex(cur => cur[prop] === value);\n  }\n\n  // use `find` + `indexOf` if `findIndex` isn't supported\n  const match = find(arr, obj => obj[prop] === value);\n  return arr.indexOf(match);\n}\n","import isFunction from './isFunction';\nimport findIndex from './findIndex';\nimport getClientRect from '../utils/getClientRect';\n\n/**\n * Loop trough the list of modifiers and run them in order,\n * each of them will then edit the data object.\n * @method\n * @memberof Popper.Utils\n * @param {dataObject} data\n * @param {Array} modifiers\n * @param {String} ends - Optional modifier name used as stopper\n * @returns {dataObject}\n */\nexport default function runModifiers(modifiers, data, ends) {\n  const modifiersToRun = ends === undefined\n    ? modifiers\n    : modifiers.slice(0, findIndex(modifiers, 'name', ends));\n\n  modifiersToRun.forEach(modifier => {\n    if (modifier['function']) { // eslint-disable-line dot-notation\n      console.warn('`modifier.function` is deprecated, use `modifier.fn`!');\n    }\n    const fn = modifier['function'] || modifier.fn; // eslint-disable-line dot-notation\n    if (modifier.enabled && isFunction(fn)) {\n      // Add properties to offsets to make them a complete clientRect object\n      // we do this before each modifier to make sure the previous one doesn't\n      // mess with these values\n      data.offsets.popper = getClientRect(data.offsets.popper);\n      data.offsets.reference = getClientRect(data.offsets.reference);\n\n      data = fn(data, modifier);\n    }\n  });\n\n  return data;\n}\n","import computeAutoPlacement from '../utils/computeAutoPlacement';\nimport getReferenceOffsets from '../utils/getReferenceOffsets';\nimport getPopperOffsets from '../utils/getPopperOffsets';\nimport runModifiers from '../utils/runModifiers';\n\n/**\n * Updates the position of the popper, computing the new offsets and applying\n * the new style.<br />\n * Prefer `scheduleUpdate` over `update` because of performance reasons.\n * @method\n * @memberof Popper\n */\nexport default function update() {\n  // if popper is destroyed, don't perform any further update\n  if (this.state.isDestroyed) {\n    return;\n  }\n\n  let data = {\n    instance: this,\n    styles: {},\n    arrowStyles: {},\n    attributes: {},\n    flipped: false,\n    offsets: {},\n  };\n\n  // compute reference element offsets\n  data.offsets.reference = getReferenceOffsets(\n    this.state,\n    this.popper,\n    this.reference,\n    this.options.positionFixed\n  );\n\n  // compute auto placement, store placement inside the data object,\n  // modifiers will be able to edit `placement` if needed\n  // and refer to originalPlacement to know the original value\n  data.placement = computeAutoPlacement(\n    this.options.placement,\n    data.offsets.reference,\n    this.popper,\n    this.reference,\n    this.options.modifiers.flip.boundariesElement,\n    this.options.modifiers.flip.padding\n  );\n\n  // store the computed placement inside `originalPlacement`\n  data.originalPlacement = data.placement;\n\n  data.positionFixed = this.options.positionFixed;\n\n  // compute the popper offsets\n  data.offsets.popper = getPopperOffsets(\n    this.popper,\n    data.offsets.reference,\n    data.placement\n  );\n\n  data.offsets.popper.position = this.options.positionFixed\n    ? 'fixed'\n    : 'absolute';\n\n  // run the modifiers\n  data = runModifiers(this.modifiers, data);\n\n  // the first `update` will call `onCreate` callback\n  // the other ones will call `onUpdate` callback\n  if (!this.state.isCreated) {\n    this.state.isCreated = true;\n    this.options.onCreate(data);\n  } else {\n    this.options.onUpdate(data);\n  }\n}\n","/**\n * Helper used to know if the given modifier is enabled.\n * @method\n * @memberof Popper.Utils\n * @returns {Boolean}\n */\nexport default function isModifierEnabled(modifiers, modifierName) {\n  return modifiers.some(\n    ({ name, enabled }) => enabled && name === modifierName\n  );\n}\n","/**\n * Get the prefixed supported property name\n * @method\n * @memberof Popper.Utils\n * @argument {String} property (camelCase)\n * @returns {String} prefixed property (camelCase or PascalCase, depending on the vendor prefix)\n */\nexport default function getSupportedPropertyName(property) {\n  const prefixes = [false, 'ms', 'Webkit', 'Moz', 'O'];\n  const upperProp = property.charAt(0).toUpperCase() + property.slice(1);\n\n  for (let i = 0; i < prefixes.length; i++) {\n    const prefix = prefixes[i];\n    const toCheck = prefix ? `${prefix}${upperProp}` : property;\n    if (typeof document.body.style[toCheck] !== 'undefined') {\n      return toCheck;\n    }\n  }\n  return null;\n}\n","import isModifierEnabled from '../utils/isModifierEnabled';\nimport getSupportedPropertyName from '../utils/getSupportedPropertyName';\n\n/**\n * Destroys the popper.\n * @method\n * @memberof Popper\n */\nexport default function destroy() {\n  this.state.isDestroyed = true;\n\n  // touch DOM only if `applyStyle` modifier is enabled\n  if (isModifierEnabled(this.modifiers, 'applyStyle')) {\n    this.popper.removeAttribute('x-placement');\n    this.popper.style.position = '';\n    this.popper.style.top = '';\n    this.popper.style.left = '';\n    this.popper.style.right = '';\n    this.popper.style.bottom = '';\n    this.popper.style.willChange = '';\n    this.popper.style[getSupportedPropertyName('transform')] = '';\n  }\n\n  this.disableEventListeners();\n\n  // remove the popper if user explicitly asked for the deletion on destroy\n  // do not use `remove` because IE11 doesn't support it\n  if (this.options.removeOnDestroy) {\n    this.popper.parentNode.removeChild(this.popper);\n  }\n  return this;\n}\n","/**\n * Get the window associated with the element\n * @argument {Element} element\n * @returns {Window}\n */\nexport default function getWindow(element) {\n  const ownerDocument = element.ownerDocument;\n  return ownerDocument ? ownerDocument.defaultView : window;\n}\n","import getScrollParent from './getScrollParent';\nimport getWindow from './getWindow';\n\nfunction attachToScrollParents(scrollParent, event, callback, scrollParents) {\n  const isBody = scrollParent.nodeName === 'BODY';\n  const target = isBody ? scrollParent.ownerDocument.defaultView : scrollParent;\n  target.addEventListener(event, callback, { passive: true });\n\n  if (!isBody) {\n    attachToScrollParents(\n      getScrollParent(target.parentNode),\n      event,\n      callback,\n      scrollParents\n    );\n  }\n  scrollParents.push(target);\n}\n\n/**\n * Setup needed event listeners used to update the popper position\n * @method\n * @memberof Popper.Utils\n * @private\n */\nexport default function setupEventListeners(\n  reference,\n  options,\n  state,\n  updateBound\n) {\n  // Resize event listener on window\n  state.updateBound = updateBound;\n  getWindow(reference).addEventListener('resize', state.updateBound, { passive: true });\n\n  // Scroll event listener on scroll parents\n  const scrollElement = getScrollParent(reference);\n  attachToScrollParents(\n    scrollElement,\n    'scroll',\n    state.updateBound,\n    state.scrollParents\n  );\n  state.scrollElement = scrollElement;\n  state.eventsEnabled = true;\n\n  return state;\n}\n","import setupEventListeners from '../utils/setupEventListeners';\n\n/**\n * It will add resize/scroll events and start recalculating\n * position of the popper element when they are triggered.\n * @method\n * @memberof Popper\n */\nexport default function enableEventListeners() {\n  if (!this.state.eventsEnabled) {\n    this.state = setupEventListeners(\n      this.reference,\n      this.options,\n      this.state,\n      this.scheduleUpdate\n    );\n  }\n}\n","import getWindow from './getWindow';\n\n/**\n * Remove event listeners used to update the popper position\n * @method\n * @memberof Popper.Utils\n * @private\n */\nexport default function removeEventListeners(reference, state) {\n  // Remove resize event listener on window\n  getWindow(reference).removeEventListener('resize', state.updateBound);\n\n  // Remove scroll event listener on scroll parents\n  state.scrollParents.forEach(target => {\n    target.removeEventListener('scroll', state.updateBound);\n  });\n\n  // Reset state\n  state.updateBound = null;\n  state.scrollParents = [];\n  state.scrollElement = null;\n  state.eventsEnabled = false;\n  return state;\n}\n","import removeEventListeners from '../utils/removeEventListeners';\n\n/**\n * It will remove resize/scroll events and won't recalculate popper position\n * when they are triggered. It also won't trigger `onUpdate` callback anymore,\n * unless you call `update` method manually.\n * @method\n * @memberof Popper\n */\nexport default function disableEventListeners() {\n  if (this.state.eventsEnabled) {\n    cancelAnimationFrame(this.scheduleUpdate);\n    this.state = removeEventListeners(this.reference, this.state);\n  }\n}\n","/**\n * Tells if a given input is a number\n * @method\n * @memberof Popper.Utils\n * @param {*} input to check\n * @return {Boolean}\n */\nexport default function isNumeric(n) {\n  return n !== '' && !isNaN(parseFloat(n)) && isFinite(n);\n}\n","import isNumeric from './isNumeric';\n\n/**\n * Set the style to the given popper\n * @method\n * @memberof Popper.Utils\n * @argument {Element} element - Element to apply the style to\n * @argument {Object} styles\n * Object with a list of properties and values which will be applied to the element\n */\nexport default function setStyles(element, styles) {\n  Object.keys(styles).forEach(prop => {\n    let unit = '';\n    // add unit if the value is numeric and is one of the following\n    if (\n      ['width', 'height', 'top', 'right', 'bottom', 'left'].indexOf(prop) !==\n        -1 &&\n      isNumeric(styles[prop])\n    ) {\n      unit = 'px';\n    }\n    element.style[prop] = styles[prop] + unit;\n  });\n}\n","/**\n * Set the attributes to the given popper\n * @method\n * @memberof Popper.Utils\n * @argument {Element} element - Element to apply the attributes to\n * @argument {Object} styles\n * Object with a list of properties and values which will be applied to the element\n */\nexport default function setAttributes(element, attributes) {\n  Object.keys(attributes).forEach(function(prop) {\n    const value = attributes[prop];\n    if (value !== false) {\n      element.setAttribute(prop, attributes[prop]);\n    } else {\n      element.removeAttribute(prop);\n    }\n  });\n}\n","import setStyles from '../utils/setStyles';\nimport setAttributes from '../utils/setAttributes';\nimport getReferenceOffsets from '../utils/getReferenceOffsets';\nimport computeAutoPlacement from '../utils/computeAutoPlacement';\n\n/**\n * @function\n * @memberof Modifiers\n * @argument {Object} data - The data object generated by `update` method\n * @argument {Object} data.styles - List of style properties - values to apply to popper element\n * @argument {Object} data.attributes - List of attribute properties - values to apply to popper element\n * @argument {Object} options - Modifiers configuration and options\n * @returns {Object} The same data object\n */\nexport default function applyStyle(data) {\n  // any property present in `data.styles` will be applied to the popper,\n  // in this way we can make the 3rd party modifiers add custom styles to it\n  // Be aware, modifiers could override the properties defined in the previous\n  // lines of this modifier!\n  setStyles(data.instance.popper, data.styles);\n\n  // any property present in `data.attributes` will be applied to the popper,\n  // they will be set as HTML attributes of the element\n  setAttributes(data.instance.popper, data.attributes);\n\n  // if arrowElement is defined and arrowStyles has some properties\n  if (data.arrowElement && Object.keys(data.arrowStyles).length) {\n    setStyles(data.arrowElement, data.arrowStyles);\n  }\n\n  return data;\n}\n\n/**\n * Set the x-placement attribute before everything else because it could be used\n * to add margins to the popper margins needs to be calculated to get the\n * correct popper offsets.\n * @method\n * @memberof Popper.modifiers\n * @param {HTMLElement} reference - The reference element used to position the popper\n * @param {HTMLElement} popper - The HTML element used as popper\n * @param {Object} options - Popper.js options\n */\nexport function applyStyleOnLoad(\n  reference,\n  popper,\n  options,\n  modifierOptions,\n  state\n) {\n  // compute reference element offsets\n  const referenceOffsets = getReferenceOffsets(state, popper, reference, options.positionFixed);\n\n  // compute auto placement, store placement inside the data object,\n  // modifiers will be able to edit `placement` if needed\n  // and refer to originalPlacement to know the original value\n  const placement = computeAutoPlacement(\n    options.placement,\n    referenceOffsets,\n    popper,\n    reference,\n    options.modifiers.flip.boundariesElement,\n    options.modifiers.flip.padding\n  );\n\n  popper.setAttribute('x-placement', placement);\n\n  // Apply `position` to popper before anything else because\n  // without the position applied we can't guarantee correct computations\n  setStyles(popper, { position: options.positionFixed ? 'fixed' : 'absolute' });\n\n  return options;\n}\n","/**\n * @function\n * @memberof Popper.Utils\n * @argument {Object} data - The data object generated by `update` method\n * @argument {Boolean} shouldRound - If the offsets should be rounded at all\n * @returns {Object} The popper's position offsets rounded\n *\n * The tale of pixel-perfect positioning. It's still not 100% perfect, but as\n * good as it can be within reason.\n * Discussion here: https://github.com/FezVrasta/popper.js/pull/715\n *\n * Low DPI screens cause a popper to be blurry if not using full pixels (Safari\n * as well on High DPI screens).\n *\n * Firefox prefers no rounding for positioning and does not have blurriness on\n * high DPI screens.\n *\n * Only horizontal placement and left/right values need to be considered.\n */\nexport default function getRoundedOffsets(data, shouldRound) {\n  const { popper, reference } = data.offsets;\n  const { round, floor } = Math;\n  const noRound = v => v;\n  \n  const referenceWidth = round(reference.width);\n  const popperWidth = round(popper.width);\n  \n  const isVertical = ['left', 'right'].indexOf(data.placement) !== -1;\n  const isVariation = data.placement.indexOf('-') !== -1;\n  const sameWidthParity = referenceWidth % 2 === popperWidth % 2;\n  const bothOddWidth = referenceWidth % 2 === 1 && popperWidth % 2 === 1;\n\n  const horizontalToInteger = !shouldRound\n    ? noRound\n    : isVertical || isVariation || sameWidthParity\n    ? round\n    : floor;\n  const verticalToInteger = !shouldRound ? noRound : round;\n\n  return {\n    left: horizontalToInteger(\n      bothOddWidth && !isVariation && shouldRound\n        ? popper.left - 1\n        : popper.left\n    ),\n    top: verticalToInteger(popper.top),\n    bottom: verticalToInteger(popper.bottom),\n    right: horizontalToInteger(popper.right),\n  };\n}\n","import getSupportedPropertyName from '../utils/getSupportedPropertyName';\nimport find from '../utils/find';\nimport getOffsetParent from '../utils/getOffsetParent';\nimport getBoundingClientRect from '../utils/getBoundingClientRect';\nimport getRoundedOffsets from '../utils/getRoundedOffsets';\nimport isBrowser from '../utils/isBrowser';\n\nconst isFirefox = isBrowser && /Firefox/i.test(navigator.userAgent);\n\n/**\n * @function\n * @memberof Modifiers\n * @argument {Object} data - The data object generated by `update` method\n * @argument {Object} options - Modifiers configuration and options\n * @returns {Object} The data object, properly modified\n */\nexport default function computeStyle(data, options) {\n  const { x, y } = options;\n  const { popper } = data.offsets;\n\n  // Remove this legacy support in Popper.js v2\n  const legacyGpuAccelerationOption = find(\n    data.instance.modifiers,\n    modifier => modifier.name === 'applyStyle'\n  ).gpuAcceleration;\n  if (legacyGpuAccelerationOption !== undefined) {\n    console.warn(\n      'WARNING: `gpuAcceleration` option moved to `computeStyle` modifier and will not be supported in future versions of Popper.js!'\n    );\n  }\n  const gpuAcceleration =\n    legacyGpuAccelerationOption !== undefined\n      ? legacyGpuAccelerationOption\n      : options.gpuAcceleration;\n\n  const offsetParent = getOffsetParent(data.instance.popper);\n  const offsetParentRect = getBoundingClientRect(offsetParent);\n\n  // Styles\n  const styles = {\n    position: popper.position,\n  };\n\n  const offsets = getRoundedOffsets(\n    data,\n    window.devicePixelRatio < 2 || !isFirefox\n  );\n\n  const sideA = x === 'bottom' ? 'top' : 'bottom';\n  const sideB = y === 'right' ? 'left' : 'right';\n\n  // if gpuAcceleration is set to `true` and transform is supported,\n  //  we use `translate3d` to apply the position to the popper we\n  // automatically use the supported prefixed version if needed\n  const prefixedProperty = getSupportedPropertyName('transform');\n\n  // now, let's make a step back and look at this code closely (wtf?)\n  // If the content of the popper grows once it's been positioned, it\n  // may happen that the popper gets misplaced because of the new content\n  // overflowing its reference element\n  // To avoid this problem, we provide two options (x and y), which allow\n  // the consumer to define the offset origin.\n  // If we position a popper on top of a reference element, we can set\n  // `x` to `top` to make the popper grow towards its top instead of\n  // its bottom.\n  let left, top;\n  if (sideA === 'bottom') {\n    // when offsetParent is <html> the positioning is relative to the bottom of the screen (excluding the scrollbar)\n    // and not the bottom of the html element\n    if (offsetParent.nodeName === 'HTML') {\n      top = -offsetParent.clientHeight + offsets.bottom;\n    } else {\n      top = -offsetParentRect.height + offsets.bottom;\n    }\n  } else {\n    top = offsets.top;\n  }\n  if (sideB === 'right') {\n    if (offsetParent.nodeName === 'HTML') {\n      left = -offsetParent.clientWidth + offsets.right;\n    } else {\n      left = -offsetParentRect.width + offsets.right;\n    }\n  } else {\n    left = offsets.left;\n  }\n  if (gpuAcceleration && prefixedProperty) {\n    styles[prefixedProperty] = `translate3d(${left}px, ${top}px, 0)`;\n    styles[sideA] = 0;\n    styles[sideB] = 0;\n    styles.willChange = 'transform';\n  } else {\n    // othwerise, we use the standard `top`, `left`, `bottom` and `right` properties\n    const invertTop = sideA === 'bottom' ? -1 : 1;\n    const invertLeft = sideB === 'right' ? -1 : 1;\n    styles[sideA] = top * invertTop;\n    styles[sideB] = left * invertLeft;\n    styles.willChange = `${sideA}, ${sideB}`;\n  }\n\n  // Attributes\n  const attributes = {\n    'x-placement': data.placement,\n  };\n\n  // Update `data` attributes, styles and arrowStyles\n  data.attributes = { ...attributes, ...data.attributes };\n  data.styles = { ...styles, ...data.styles };\n  data.arrowStyles = { ...data.offsets.arrow, ...data.arrowStyles };\n\n  return data;\n}\n","import find from './find';\n\n/**\n * Helper used to know if the given modifier depends from another one.<br />\n * It checks if the needed modifier is listed and enabled.\n * @method\n * @memberof Popper.Utils\n * @param {Array} modifiers - list of modifiers\n * @param {String} requestingName - name of requesting modifier\n * @param {String} requestedName - name of requested modifier\n * @returns {Boolean}\n */\nexport default function isModifierRequired(\n  modifiers,\n  requestingName,\n  requestedName\n) {\n  const requesting = find(modifiers, ({ name }) => name === requestingName);\n\n  const isRequired =\n    !!requesting &&\n    modifiers.some(modifier => {\n      return (\n        modifier.name === requestedName &&\n        modifier.enabled &&\n        modifier.order < requesting.order\n      );\n    });\n\n  if (!isRequired) {\n    const requesting = `\\`${requestingName}\\``;\n    const requested = `\\`${requestedName}\\``;\n    console.warn(\n      `${requested} modifier is required by ${requesting} modifier in order to work, be sure to include it before ${requesting}!`\n    );\n  }\n  return isRequired;\n}\n","import getClientRect from '../utils/getClientRect';\nimport getOuterSizes from '../utils/getOuterSizes';\nimport isModifierRequired from '../utils/isModifierRequired';\nimport getStyleComputedProperty from '../utils/getStyleComputedProperty';\n\n/**\n * @function\n * @memberof Modifiers\n * @argument {Object} data - The data object generated by update method\n * @argument {Object} options - Modifiers configuration and options\n * @returns {Object} The data object, properly modified\n */\nexport default function arrow(data, options) {\n  // arrow depends on keepTogether in order to work\n  if (!isModifierRequired(data.instance.modifiers, 'arrow', 'keepTogether')) {\n    return data;\n  }\n\n  let arrowElement = options.element;\n\n  // if arrowElement is a string, suppose it's a CSS selector\n  if (typeof arrowElement === 'string') {\n    arrowElement = data.instance.popper.querySelector(arrowElement);\n\n    // if arrowElement is not found, don't run the modifier\n    if (!arrowElement) {\n      return data;\n    }\n  } else {\n    // if the arrowElement isn't a query selector we must check that the\n    // provided DOM node is child of its popper node\n    if (!data.instance.popper.contains(arrowElement)) {\n      console.warn(\n        'WARNING: `arrow.element` must be child of its popper element!'\n      );\n      return data;\n    }\n  }\n\n  const placement = data.placement.split('-')[0];\n  const { popper, reference } = data.offsets;\n  const isVertical = ['left', 'right'].indexOf(placement) !== -1;\n\n  const len = isVertical ? 'height' : 'width';\n  const sideCapitalized = isVertical ? 'Top' : 'Left';\n  const side = sideCapitalized.toLowerCase();\n  const altSide = isVertical ? 'left' : 'top';\n  const opSide = isVertical ? 'bottom' : 'right';\n  const arrowElementSize = getOuterSizes(arrowElement)[len];\n\n  //\n  // extends keepTogether behavior making sure the popper and its\n  // reference have enough pixels in conjunction\n  //\n\n  // top/left side\n  if (reference[opSide] - arrowElementSize < popper[side]) {\n    data.offsets.popper[side] -=\n      popper[side] - (reference[opSide] - arrowElementSize);\n  }\n  // bottom/right side\n  if (reference[side] + arrowElementSize > popper[opSide]) {\n    data.offsets.popper[side] +=\n      reference[side] + arrowElementSize - popper[opSide];\n  }\n  data.offsets.popper = getClientRect(data.offsets.popper);\n\n  // compute center of the popper\n  const center = reference[side] + reference[len] / 2 - arrowElementSize / 2;\n\n  // Compute the sideValue using the updated popper offsets\n  // take popper margin in account because we don't have this info available\n  const css = getStyleComputedProperty(data.instance.popper);\n  const popperMarginSide = parseFloat(css[`margin${sideCapitalized}`]);\n  const popperBorderSide = parseFloat(css[`border${sideCapitalized}Width`]);\n  let sideValue =\n    center - data.offsets.popper[side] - popperMarginSide - popperBorderSide;\n\n  // prevent arrowElement from being placed not contiguously to its popper\n  sideValue = Math.max(Math.min(popper[len] - arrowElementSize, sideValue), 0);\n\n  data.arrowElement = arrowElement;\n  data.offsets.arrow = {\n    [side]: Math.round(sideValue),\n    [altSide]: '', // make sure to unset any eventual altSide value from the DOM node\n  };\n\n  return data;\n}\n","/**\n * Get the opposite placement variation of the given one\n * @method\n * @memberof Popper.Utils\n * @argument {String} placement variation\n * @returns {String} flipped placement variation\n */\nexport default function getOppositeVariation(variation) {\n  if (variation === 'end') {\n    return 'start';\n  } else if (variation === 'start') {\n    return 'end';\n  }\n  return variation;\n}\n","/**\n * List of accepted placements to use as values of the `placement` option.<br />\n * Valid placements are:\n * - `auto`\n * - `top`\n * - `right`\n * - `bottom`\n * - `left`\n *\n * Each placement can have a variation from this list:\n * - `-start`\n * - `-end`\n *\n * Variations are interpreted easily if you think of them as the left to right\n * written languages. Horizontally (`top` and `bottom`), `start` is left and `end`\n * is right.<br />\n * Vertically (`left` and `right`), `start` is top and `end` is bottom.\n *\n * Some valid examples are:\n * - `top-end` (on top of reference, right aligned)\n * - `right-start` (on right of reference, top aligned)\n * - `bottom` (on bottom, centered)\n * - `auto-end` (on the side with more space available, alignment depends by placement)\n *\n * @static\n * @type {Array}\n * @enum {String}\n * @readonly\n * @method placements\n * @memberof Popper\n */\nexport default [\n  'auto-start',\n  'auto',\n  'auto-end',\n  'top-start',\n  'top',\n  'top-end',\n  'right-start',\n  'right',\n  'right-end',\n  'bottom-end',\n  'bottom',\n  'bottom-start',\n  'left-end',\n  'left',\n  'left-start',\n];\n","import placements from '../methods/placements';\n\n// Get rid of `auto` `auto-start` and `auto-end`\nconst validPlacements = placements.slice(3);\n\n/**\n * Given an initial placement, returns all the subsequent placements\n * clockwise (or counter-clockwise).\n *\n * @method\n * @memberof Popper.Utils\n * @argument {String} placement - A valid placement (it accepts variations)\n * @argument {Boolean} counter - Set to true to walk the placements counterclockwise\n * @returns {Array} placements including their variations\n */\nexport default function clockwise(placement, counter = false) {\n  const index = validPlacements.indexOf(placement);\n  const arr = validPlacements\n    .slice(index + 1)\n    .concat(validPlacements.slice(0, index));\n  return counter ? arr.reverse() : arr;\n}\n","import getOppositePlacement from '../utils/getOppositePlacement';\nimport getOppositeVariation from '../utils/getOppositeVariation';\nimport getPopperOffsets from '../utils/getPopperOffsets';\nimport runModifiers from '../utils/runModifiers';\nimport getBoundaries from '../utils/getBoundaries';\nimport isModifierEnabled from '../utils/isModifierEnabled';\nimport clockwise from '../utils/clockwise';\n\nconst BEHAVIORS = {\n  FLIP: 'flip',\n  CLOCKWISE: 'clockwise',\n  COUNTERCLOCKWISE: 'counterclockwise',\n};\n\n/**\n * @function\n * @memberof Modifiers\n * @argument {Object} data - The data object generated by update method\n * @argument {Object} options - Modifiers configuration and options\n * @returns {Object} The data object, properly modified\n */\nexport default function flip(data, options) {\n  // if `inner` modifier is enabled, we can't use the `flip` modifier\n  if (isModifierEnabled(data.instance.modifiers, 'inner')) {\n    return data;\n  }\n\n  if (data.flipped && data.placement === data.originalPlacement) {\n    // seems like flip is trying to loop, probably there's not enough space on any of the flippable sides\n    return data;\n  }\n\n  const boundaries = getBoundaries(\n    data.instance.popper,\n    data.instance.reference,\n    options.padding,\n    options.boundariesElement,\n    data.positionFixed\n  );\n\n  let placement = data.placement.split('-')[0];\n  let placementOpposite = getOppositePlacement(placement);\n  let variation = data.placement.split('-')[1] || '';\n\n  let flipOrder = [];\n\n  switch (options.behavior) {\n    case BEHAVIORS.FLIP:\n      flipOrder = [placement, placementOpposite];\n      break;\n    case BEHAVIORS.CLOCKWISE:\n      flipOrder = clockwise(placement);\n      break;\n    case BEHAVIORS.COUNTERCLOCKWISE:\n      flipOrder = clockwise(placement, true);\n      break;\n    default:\n      flipOrder = options.behavior;\n  }\n\n  flipOrder.forEach((step, index) => {\n    if (placement !== step || flipOrder.length === index + 1) {\n      return data;\n    }\n\n    placement = data.placement.split('-')[0];\n    placementOpposite = getOppositePlacement(placement);\n\n    const popperOffsets = data.offsets.popper;\n    const refOffsets = data.offsets.reference;\n\n    // using floor because the reference offsets may contain decimals we are not going to consider here\n    const floor = Math.floor;\n    const overlapsRef =\n      (placement === 'left' &&\n        floor(popperOffsets.right) > floor(refOffsets.left)) ||\n      (placement === 'right' &&\n        floor(popperOffsets.left) < floor(refOffsets.right)) ||\n      (placement === 'top' &&\n        floor(popperOffsets.bottom) > floor(refOffsets.top)) ||\n      (placement === 'bottom' &&\n        floor(popperOffsets.top) < floor(refOffsets.bottom));\n\n    const overflowsLeft = floor(popperOffsets.left) < floor(boundaries.left);\n    const overflowsRight = floor(popperOffsets.right) > floor(boundaries.right);\n    const overflowsTop = floor(popperOffsets.top) < floor(boundaries.top);\n    const overflowsBottom =\n      floor(popperOffsets.bottom) > floor(boundaries.bottom);\n\n    const overflowsBoundaries =\n      (placement === 'left' && overflowsLeft) ||\n      (placement === 'right' && overflowsRight) ||\n      (placement === 'top' && overflowsTop) ||\n      (placement === 'bottom' && overflowsBottom);\n\n    // flip the variation if required\n    const isVertical = ['top', 'bottom'].indexOf(placement) !== -1;\n\n    // flips variation if reference element overflows boundaries\n    const flippedVariationByRef =\n      !!options.flipVariations &&\n      ((isVertical && variation === 'start' && overflowsLeft) ||\n        (isVertical && variation === 'end' && overflowsRight) ||\n        (!isVertical && variation === 'start' && overflowsTop) ||\n        (!isVertical && variation === 'end' && overflowsBottom));\n\n    // flips variation if popper content overflows boundaries\n    const flippedVariationByContent =\n      !!options.flipVariationsByContent &&\n      ((isVertical && variation === 'start' && overflowsRight) ||\n        (isVertical && variation === 'end' && overflowsLeft) ||\n        (!isVertical && variation === 'start' && overflowsBottom) ||\n        (!isVertical && variation === 'end' && overflowsTop));\n\n    const flippedVariation = flippedVariationByRef || flippedVariationByContent;\n\n    if (overlapsRef || overflowsBoundaries || flippedVariation) {\n      // this boolean to detect any flip loop\n      data.flipped = true;\n\n      if (overlapsRef || overflowsBoundaries) {\n        placement = flipOrder[index + 1];\n      }\n\n      if (flippedVariation) {\n        variation = getOppositeVariation(variation);\n      }\n\n      data.placement = placement + (variation ? '-' + variation : '');\n\n      // this object contains `position`, we want to preserve it along with\n      // any additional property we may add in the future\n      data.offsets.popper = {\n        ...data.offsets.popper,\n        ...getPopperOffsets(\n          data.instance.popper,\n          data.offsets.reference,\n          data.placement\n        ),\n      };\n\n      data = runModifiers(data.instance.modifiers, data, 'flip');\n    }\n  });\n  return data;\n}\n","/**\n * @function\n * @memberof Modifiers\n * @argument {Object} data - The data object generated by update method\n * @argument {Object} options - Modifiers configuration and options\n * @returns {Object} The data object, properly modified\n */\nexport default function keepTogether(data) {\n  const { popper, reference } = data.offsets;\n  const placement = data.placement.split('-')[0];\n  const floor = Math.floor;\n  const isVertical = ['top', 'bottom'].indexOf(placement) !== -1;\n  const side = isVertical ? 'right' : 'bottom';\n  const opSide = isVertical ? 'left' : 'top';\n  const measurement = isVertical ? 'width' : 'height';\n\n  if (popper[side] < floor(reference[opSide])) {\n    data.offsets.popper[opSide] =\n      floor(reference[opSide]) - popper[measurement];\n  }\n  if (popper[opSide] > floor(reference[side])) {\n    data.offsets.popper[opSide] = floor(reference[side]);\n  }\n\n  return data;\n}\n","import isNumeric from '../utils/isNumeric';\nimport getClientRect from '../utils/getClientRect';\nimport find from '../utils/find';\n\n/**\n * Converts a string containing value + unit into a px value number\n * @function\n * @memberof {modifiers~offset}\n * @private\n * @argument {String} str - Value + unit string\n * @argument {String} measurement - `height` or `width`\n * @argument {Object} popperOffsets\n * @argument {Object} referenceOffsets\n * @returns {Number|String}\n * Value in pixels, or original string if no values were extracted\n */\nexport function toValue(str, measurement, popperOffsets, referenceOffsets) {\n  // separate value from unit\n  const split = str.match(/((?:\\-|\\+)?\\d*\\.?\\d*)(.*)/);\n  const value = +split[1];\n  const unit = split[2];\n\n  // If it's not a number it's an operator, I guess\n  if (!value) {\n    return str;\n  }\n\n  if (unit.indexOf('%') === 0) {\n    let element;\n    switch (unit) {\n      case '%p':\n        element = popperOffsets;\n        break;\n      case '%':\n      case '%r':\n      default:\n        element = referenceOffsets;\n    }\n\n    const rect = getClientRect(element);\n    return rect[measurement] / 100 * value;\n  } else if (unit === 'vh' || unit === 'vw') {\n    // if is a vh or vw, we calculate the size based on the viewport\n    let size;\n    if (unit === 'vh') {\n      size = Math.max(\n        document.documentElement.clientHeight,\n        window.innerHeight || 0\n      );\n    } else {\n      size = Math.max(\n        document.documentElement.clientWidth,\n        window.innerWidth || 0\n      );\n    }\n    return size / 100 * value;\n  } else {\n    // if is an explicit pixel unit, we get rid of the unit and keep the value\n    // if is an implicit unit, it's px, and we return just the value\n    return value;\n  }\n}\n\n/**\n * Parse an `offset` string to extrapolate `x` and `y` numeric offsets.\n * @function\n * @memberof {modifiers~offset}\n * @private\n * @argument {String} offset\n * @argument {Object} popperOffsets\n * @argument {Object} referenceOffsets\n * @argument {String} basePlacement\n * @returns {Array} a two cells array with x and y offsets in numbers\n */\nexport function parseOffset(\n  offset,\n  popperOffsets,\n  referenceOffsets,\n  basePlacement\n) {\n  const offsets = [0, 0];\n\n  // Use height if placement is left or right and index is 0 otherwise use width\n  // in this way the first offset will use an axis and the second one\n  // will use the other one\n  const useHeight = ['right', 'left'].indexOf(basePlacement) !== -1;\n\n  // Split the offset string to obtain a list of values and operands\n  // The regex addresses values with the plus or minus sign in front (+10, -20, etc)\n  const fragments = offset.split(/(\\+|\\-)/).map(frag => frag.trim());\n\n  // Detect if the offset string contains a pair of values or a single one\n  // they could be separated by comma or space\n  const divider = fragments.indexOf(\n    find(fragments, frag => frag.search(/,|\\s/) !== -1)\n  );\n\n  if (fragments[divider] && fragments[divider].indexOf(',') === -1) {\n    console.warn(\n      'Offsets separated by white space(s) are deprecated, use a comma (,) instead.'\n    );\n  }\n\n  // If divider is found, we divide the list of values and operands to divide\n  // them by ofset X and Y.\n  const splitRegex = /\\s*,\\s*|\\s+/;\n  let ops = divider !== -1\n    ? [\n        fragments\n          .slice(0, divider)\n          .concat([fragments[divider].split(splitRegex)[0]]),\n        [fragments[divider].split(splitRegex)[1]].concat(\n          fragments.slice(divider + 1)\n        ),\n      ]\n    : [fragments];\n\n  // Convert the values with units to absolute pixels to allow our computations\n  ops = ops.map((op, index) => {\n    // Most of the units rely on the orientation of the popper\n    const measurement = (index === 1 ? !useHeight : useHeight)\n      ? 'height'\n      : 'width';\n    let mergeWithPrevious = false;\n    return (\n      op\n        // This aggregates any `+` or `-` sign that aren't considered operators\n        // e.g.: 10 + +5 => [10, +, +5]\n        .reduce((a, b) => {\n          if (a[a.length - 1] === '' && ['+', '-'].indexOf(b) !== -1) {\n            a[a.length - 1] = b;\n            mergeWithPrevious = true;\n            return a;\n          } else if (mergeWithPrevious) {\n            a[a.length - 1] += b;\n            mergeWithPrevious = false;\n            return a;\n          } else {\n            return a.concat(b);\n          }\n        }, [])\n        // Here we convert the string values into number values (in px)\n        .map(str => toValue(str, measurement, popperOffsets, referenceOffsets))\n    );\n  });\n\n  // Loop trough the offsets arrays and execute the operations\n  ops.forEach((op, index) => {\n    op.forEach((frag, index2) => {\n      if (isNumeric(frag)) {\n        offsets[index] += frag * (op[index2 - 1] === '-' ? -1 : 1);\n      }\n    });\n  });\n  return offsets;\n}\n\n/**\n * @function\n * @memberof Modifiers\n * @argument {Object} data - The data object generated by update method\n * @argument {Object} options - Modifiers configuration and options\n * @argument {Number|String} options.offset=0\n * The offset value as described in the modifier description\n * @returns {Object} The data object, properly modified\n */\nexport default function offset(data, { offset }) {\n  const { placement, offsets: { popper, reference } } = data;\n  const basePlacement = placement.split('-')[0];\n\n  let offsets;\n  if (isNumeric(+offset)) {\n    offsets = [+offset, 0];\n  } else {\n    offsets = parseOffset(offset, popper, reference, basePlacement);\n  }\n\n  if (basePlacement === 'left') {\n    popper.top += offsets[0];\n    popper.left -= offsets[1];\n  } else if (basePlacement === 'right') {\n    popper.top += offsets[0];\n    popper.left += offsets[1];\n  } else if (basePlacement === 'top') {\n    popper.left += offsets[0];\n    popper.top -= offsets[1];\n  } else if (basePlacement === 'bottom') {\n    popper.left += offsets[0];\n    popper.top += offsets[1];\n  }\n\n  data.popper = popper;\n  return data;\n}\n","import getOffsetParent from '../utils/getOffsetParent';\nimport getBoundaries from '../utils/getBoundaries';\nimport getSupportedPropertyName from '../utils/getSupportedPropertyName';\n\n/**\n * @function\n * @memberof Modifiers\n * @argument {Object} data - The data object generated by `update` method\n * @argument {Object} options - Modifiers configuration and options\n * @returns {Object} The data object, properly modified\n */\nexport default function preventOverflow(data, options) {\n  let boundariesElement =\n    options.boundariesElement || getOffsetParent(data.instance.popper);\n\n  // If offsetParent is the reference element, we really want to\n  // go one step up and use the next offsetParent as reference to\n  // avoid to make this modifier completely useless and look like broken\n  if (data.instance.reference === boundariesElement) {\n    boundariesElement = getOffsetParent(boundariesElement);\n  }\n\n  // NOTE: DOM access here\n  // resets the popper's position so that the document size can be calculated excluding\n  // the size of the popper element itself\n  const transformProp = getSupportedPropertyName('transform');\n  const popperStyles = data.instance.popper.style; // assignment to help minification\n  const { top, left, [transformProp]: transform } = popperStyles;\n  popperStyles.top = '';\n  popperStyles.left = '';\n  popperStyles[transformProp] = '';\n\n  const boundaries = getBoundaries(\n    data.instance.popper,\n    data.instance.reference,\n    options.padding,\n    boundariesElement,\n    data.positionFixed\n  );\n\n  // NOTE: DOM access here\n  // restores the original style properties after the offsets have been computed\n  popperStyles.top = top;\n  popperStyles.left = left;\n  popperStyles[transformProp] = transform;\n\n  options.boundaries = boundaries;\n\n  const order = options.priority;\n  let popper = data.offsets.popper;\n\n  const check = {\n    primary(placement) {\n      let value = popper[placement];\n      if (\n        popper[placement] < boundaries[placement] &&\n        !options.escapeWithReference\n      ) {\n        value = Math.max(popper[placement], boundaries[placement]);\n      }\n      return { [placement]: value };\n    },\n    secondary(placement) {\n      const mainSide = placement === 'right' ? 'left' : 'top';\n      let value = popper[mainSide];\n      if (\n        popper[placement] > boundaries[placement] &&\n        !options.escapeWithReference\n      ) {\n        value = Math.min(\n          popper[mainSide],\n          boundaries[placement] -\n            (placement === 'right' ? popper.width : popper.height)\n        );\n      }\n      return { [mainSide]: value };\n    },\n  };\n\n  order.forEach(placement => {\n    const side =\n      ['left', 'top'].indexOf(placement) !== -1 ? 'primary' : 'secondary';\n    popper = { ...popper, ...check[side](placement) };\n  });\n\n  data.offsets.popper = popper;\n\n  return data;\n}\n","/**\n * @function\n * @memberof Modifiers\n * @argument {Object} data - The data object generated by `update` method\n * @argument {Object} options - Modifiers configuration and options\n * @returns {Object} The data object, properly modified\n */\nexport default function shift(data) {\n  const placement = data.placement;\n  const basePlacement = placement.split('-')[0];\n  const shiftvariation = placement.split('-')[1];\n\n  // if shift shiftvariation is specified, run the modifier\n  if (shiftvariation) {\n    const { reference, popper } = data.offsets;\n    const isVertical = ['bottom', 'top'].indexOf(basePlacement) !== -1;\n    const side = isVertical ? 'left' : 'top';\n    const measurement = isVertical ? 'width' : 'height';\n\n    const shiftOffsets = {\n      start: { [side]: reference[side] },\n      end: {\n        [side]: reference[side] + reference[measurement] - popper[measurement],\n      },\n    };\n\n    data.offsets.popper = { ...popper, ...shiftOffsets[shiftvariation] };\n  }\n\n  return data;\n}\n","import isModifierRequired from '../utils/isModifierRequired';\nimport find from '../utils/find';\n\n/**\n * @function\n * @memberof Modifiers\n * @argument {Object} data - The data object generated by update method\n * @argument {Object} options - Modifiers configuration and options\n * @returns {Object} The data object, properly modified\n */\nexport default function hide(data) {\n  if (!isModifierRequired(data.instance.modifiers, 'hide', 'preventOverflow')) {\n    return data;\n  }\n\n  const refRect = data.offsets.reference;\n  const bound = find(\n    data.instance.modifiers,\n    modifier => modifier.name === 'preventOverflow'\n  ).boundaries;\n\n  if (\n    refRect.bottom < bound.top ||\n    refRect.left > bound.right ||\n    refRect.top > bound.bottom ||\n    refRect.right < bound.left\n  ) {\n    // Avoid unnecessary DOM access if visibility hasn't changed\n    if (data.hide === true) {\n      return data;\n    }\n\n    data.hide = true;\n    data.attributes['x-out-of-boundaries'] = '';\n  } else {\n    // Avoid unnecessary DOM access if visibility hasn't changed\n    if (data.hide === false) {\n      return data;\n    }\n\n    data.hide = false;\n    data.attributes['x-out-of-boundaries'] = false;\n  }\n\n  return data;\n}\n","import getClientRect from '../utils/getClientRect';\nimport getOppositePlacement from '../utils/getOppositePlacement';\n\n/**\n * @function\n * @memberof Modifiers\n * @argument {Object} data - The data object generated by `update` method\n * @argument {Object} options - Modifiers configuration and options\n * @returns {Object} The data object, properly modified\n */\nexport default function inner(data) {\n  const placement = data.placement;\n  const basePlacement = placement.split('-')[0];\n  const { popper, reference } = data.offsets;\n  const isHoriz = ['left', 'right'].indexOf(basePlacement) !== -1;\n\n  const subtractLength = ['top', 'left'].indexOf(basePlacement) === -1;\n\n  popper[isHoriz ? 'left' : 'top'] =\n    reference[basePlacement] -\n    (subtractLength ? popper[isHoriz ? 'width' : 'height'] : 0);\n\n  data.placement = getOppositePlacement(placement);\n  data.offsets.popper = getClientRect(popper);\n\n  return data;\n}\n","import applyStyle, { applyStyleOnLoad } from './applyStyle';\nimport computeStyle from './computeStyle';\nimport arrow from './arrow';\nimport flip from './flip';\nimport keepTogether from './keepTogether';\nimport offset from './offset';\nimport preventOverflow from './preventOverflow';\nimport shift from './shift';\nimport hide from './hide';\nimport inner from './inner';\n\n/**\n * Modifier function, each modifier can have a function of this type assigned\n * to its `fn` property.<br />\n * These functions will be called on each update, this means that you must\n * make sure they are performant enough to avoid performance bottlenecks.\n *\n * @function ModifierFn\n * @argument {dataObject} data - The data object generated by `update` method\n * @argument {Object} options - Modifiers configuration and options\n * @returns {dataObject} The data object, properly modified\n */\n\n/**\n * Modifiers are plugins used to alter the behavior of your poppers.<br />\n * Popper.js uses a set of 9 modifiers to provide all the basic functionalities\n * needed by the library.\n *\n * Usually you don't want to override the `order`, `fn` and `onLoad` props.\n * All the other properties are configurations that could be tweaked.\n * @namespace modifiers\n */\nexport default {\n  /**\n   * Modifier used to shift the popper on the start or end of its reference\n   * element.<br />\n   * It will read the variation of the `placement` property.<br />\n   * It can be one either `-end` or `-start`.\n   * @memberof modifiers\n   * @inner\n   */\n  shift: {\n    /** @prop {number} order=100 - Index used to define the order of execution */\n    order: 100,\n    /** @prop {Boolean} enabled=true - Whether the modifier is enabled or not */\n    enabled: true,\n    /** @prop {ModifierFn} */\n    fn: shift,\n  },\n\n  /**\n   * The `offset` modifier can shift your popper on both its axis.\n   *\n   * It accepts the following units:\n   * - `px` or unit-less, interpreted as pixels\n   * - `%` or `%r`, percentage relative to the length of the reference element\n   * - `%p`, percentage relative to the length of the popper element\n   * - `vw`, CSS viewport width unit\n   * - `vh`, CSS viewport height unit\n   *\n   * For length is intended the main axis relative to the placement of the popper.<br />\n   * This means that if the placement is `top` or `bottom`, the length will be the\n   * `width`. In case of `left` or `right`, it will be the `height`.\n   *\n   * You can provide a single value (as `Number` or `String`), or a pair of values\n   * as `String` divided by a comma or one (or more) white spaces.<br />\n   * The latter is a deprecated method because it leads to confusion and will be\n   * removed in v2.<br />\n   * Additionally, it accepts additions and subtractions between different units.\n   * Note that multiplications and divisions aren't supported.\n   *\n   * Valid examples are:\n   * ```\n   * 10\n   * '10%'\n   * '10, 10'\n   * '10%, 10'\n   * '10 + 10%'\n   * '10 - 5vh + 3%'\n   * '-10px + 5vh, 5px - 6%'\n   * ```\n   * > **NB**: If you desire to apply offsets to your poppers in a way that may make them overlap\n   * > with their reference element, unfortunately, you will have to disable the `flip` modifier.\n   * > You can read more on this at this [issue](https://github.com/FezVrasta/popper.js/issues/373).\n   *\n   * @memberof modifiers\n   * @inner\n   */\n  offset: {\n    /** @prop {number} order=200 - Index used to define the order of execution */\n    order: 200,\n    /** @prop {Boolean} enabled=true - Whether the modifier is enabled or not */\n    enabled: true,\n    /** @prop {ModifierFn} */\n    fn: offset,\n    /** @prop {Number|String} offset=0\n     * The offset value as described in the modifier description\n     */\n    offset: 0,\n  },\n\n  /**\n   * Modifier used to prevent the popper from being positioned outside the boundary.\n   *\n   * A scenario exists where the reference itself is not within the boundaries.<br />\n   * We can say it has \"escaped the boundaries\" — or just \"escaped\".<br />\n   * In this case we need to decide whether the popper should either:\n   *\n   * - detach from the reference and remain \"trapped\" in the boundaries, or\n   * - if it should ignore the boundary and \"escape with its reference\"\n   *\n   * When `escapeWithReference` is set to`true` and reference is completely\n   * outside its boundaries, the popper will overflow (or completely leave)\n   * the boundaries in order to remain attached to the edge of the reference.\n   *\n   * @memberof modifiers\n   * @inner\n   */\n  preventOverflow: {\n    /** @prop {number} order=300 - Index used to define the order of execution */\n    order: 300,\n    /** @prop {Boolean} enabled=true - Whether the modifier is enabled or not */\n    enabled: true,\n    /** @prop {ModifierFn} */\n    fn: preventOverflow,\n    /**\n     * @prop {Array} [priority=['left','right','top','bottom']]\n     * Popper will try to prevent overflow following these priorities by default,\n     * then, it could overflow on the left and on top of the `boundariesElement`\n     */\n    priority: ['left', 'right', 'top', 'bottom'],\n    /**\n     * @prop {number} padding=5\n     * Amount of pixel used to define a minimum distance between the boundaries\n     * and the popper. This makes sure the popper always has a little padding\n     * between the edges of its container\n     */\n    padding: 5,\n    /**\n     * @prop {String|HTMLElement} boundariesElement='scrollParent'\n     * Boundaries used by the modifier. Can be `scrollParent`, `window`,\n     * `viewport` or any DOM element.\n     */\n    boundariesElement: 'scrollParent',\n  },\n\n  /**\n   * Modifier used to make sure the reference and its popper stay near each other\n   * without leaving any gap between the two. Especially useful when the arrow is\n   * enabled and you want to ensure that it points to its reference element.\n   * It cares only about the first axis. You can still have poppers with margin\n   * between the popper and its reference element.\n   * @memberof modifiers\n   * @inner\n   */\n  keepTogether: {\n    /** @prop {number} order=400 - Index used to define the order of execution */\n    order: 400,\n    /** @prop {Boolean} enabled=true - Whether the modifier is enabled or not */\n    enabled: true,\n    /** @prop {ModifierFn} */\n    fn: keepTogether,\n  },\n\n  /**\n   * This modifier is used to move the `arrowElement` of the popper to make\n   * sure it is positioned between the reference element and its popper element.\n   * It will read the outer size of the `arrowElement` node to detect how many\n   * pixels of conjunction are needed.\n   *\n   * It has no effect if no `arrowElement` is provided.\n   * @memberof modifiers\n   * @inner\n   */\n  arrow: {\n    /** @prop {number} order=500 - Index used to define the order of execution */\n    order: 500,\n    /** @prop {Boolean} enabled=true - Whether the modifier is enabled or not */\n    enabled: true,\n    /** @prop {ModifierFn} */\n    fn: arrow,\n    /** @prop {String|HTMLElement} element='[x-arrow]' - Selector or node used as arrow */\n    element: '[x-arrow]',\n  },\n\n  /**\n   * Modifier used to flip the popper's placement when it starts to overlap its\n   * reference element.\n   *\n   * Requires the `preventOverflow` modifier before it in order to work.\n   *\n   * **NOTE:** this modifier will interrupt the current update cycle and will\n   * restart it if it detects the need to flip the placement.\n   * @memberof modifiers\n   * @inner\n   */\n  flip: {\n    /** @prop {number} order=600 - Index used to define the order of execution */\n    order: 600,\n    /** @prop {Boolean} enabled=true - Whether the modifier is enabled or not */\n    enabled: true,\n    /** @prop {ModifierFn} */\n    fn: flip,\n    /**\n     * @prop {String|Array} behavior='flip'\n     * The behavior used to change the popper's placement. It can be one of\n     * `flip`, `clockwise`, `counterclockwise` or an array with a list of valid\n     * placements (with optional variations)\n     */\n    behavior: 'flip',\n    /**\n     * @prop {number} padding=5\n     * The popper will flip if it hits the edges of the `boundariesElement`\n     */\n    padding: 5,\n    /**\n     * @prop {String|HTMLElement} boundariesElement='viewport'\n     * The element which will define the boundaries of the popper position.\n     * The popper will never be placed outside of the defined boundaries\n     * (except if `keepTogether` is enabled)\n     */\n    boundariesElement: 'viewport',\n    /**\n     * @prop {Boolean} flipVariations=false\n     * The popper will switch placement variation between `-start` and `-end` when\n     * the reference element overlaps its boundaries.\n     *\n     * The original placement should have a set variation.\n     */\n    flipVariations: false,\n    /**\n     * @prop {Boolean} flipVariationsByContent=false\n     * The popper will switch placement variation between `-start` and `-end` when\n     * the popper element overlaps its reference boundaries.\n     *\n     * The original placement should have a set variation.\n     */\n    flipVariationsByContent: false,\n  },\n\n  /**\n   * Modifier used to make the popper flow toward the inner of the reference element.\n   * By default, when this modifier is disabled, the popper will be placed outside\n   * the reference element.\n   * @memberof modifiers\n   * @inner\n   */\n  inner: {\n    /** @prop {number} order=700 - Index used to define the order of execution */\n    order: 700,\n    /** @prop {Boolean} enabled=false - Whether the modifier is enabled or not */\n    enabled: false,\n    /** @prop {ModifierFn} */\n    fn: inner,\n  },\n\n  /**\n   * Modifier used to hide the popper when its reference element is outside of the\n   * popper boundaries. It will set a `x-out-of-boundaries` attribute which can\n   * be used to hide with a CSS selector the popper when its reference is\n   * out of boundaries.\n   *\n   * Requires the `preventOverflow` modifier before it in order to work.\n   * @memberof modifiers\n   * @inner\n   */\n  hide: {\n    /** @prop {number} order=800 - Index used to define the order of execution */\n    order: 800,\n    /** @prop {Boolean} enabled=true - Whether the modifier is enabled or not */\n    enabled: true,\n    /** @prop {ModifierFn} */\n    fn: hide,\n  },\n\n  /**\n   * Computes the style that will be applied to the popper element to gets\n   * properly positioned.\n   *\n   * Note that this modifier will not touch the DOM, it just prepares the styles\n   * so that `applyStyle` modifier can apply it. This separation is useful\n   * in case you need to replace `applyStyle` with a custom implementation.\n   *\n   * This modifier has `850` as `order` value to maintain backward compatibility\n   * with previous versions of Popper.js. Expect the modifiers ordering method\n   * to change in future major versions of the library.\n   *\n   * @memberof modifiers\n   * @inner\n   */\n  computeStyle: {\n    /** @prop {number} order=850 - Index used to define the order of execution */\n    order: 850,\n    /** @prop {Boolean} enabled=true - Whether the modifier is enabled or not */\n    enabled: true,\n    /** @prop {ModifierFn} */\n    fn: computeStyle,\n    /**\n     * @prop {Boolean} gpuAcceleration=true\n     * If true, it uses the CSS 3D transformation to position the popper.\n     * Otherwise, it will use the `top` and `left` properties\n     */\n    gpuAcceleration: true,\n    /**\n     * @prop {string} [x='bottom']\n     * Where to anchor the X axis (`bottom` or `top`). AKA X offset origin.\n     * Change this if your popper should grow in a direction different from `bottom`\n     */\n    x: 'bottom',\n    /**\n     * @prop {string} [x='left']\n     * Where to anchor the Y axis (`left` or `right`). AKA Y offset origin.\n     * Change this if your popper should grow in a direction different from `right`\n     */\n    y: 'right',\n  },\n\n  /**\n   * Applies the computed styles to the popper element.\n   *\n   * All the DOM manipulations are limited to this modifier. This is useful in case\n   * you want to integrate Popper.js inside a framework or view library and you\n   * want to delegate all the DOM manipulations to it.\n   *\n   * Note that if you disable this modifier, you must make sure the popper element\n   * has its position set to `absolute` before Popper.js can do its work!\n   *\n   * Just disable this modifier and define your own to achieve the desired effect.\n   *\n   * @memberof modifiers\n   * @inner\n   */\n  applyStyle: {\n    /** @prop {number} order=900 - Index used to define the order of execution */\n    order: 900,\n    /** @prop {Boolean} enabled=true - Whether the modifier is enabled or not */\n    enabled: true,\n    /** @prop {ModifierFn} */\n    fn: applyStyle,\n    /** @prop {Function} */\n    onLoad: applyStyleOnLoad,\n    /**\n     * @deprecated since version 1.10.0, the property moved to `computeStyle` modifier\n     * @prop {Boolean} gpuAcceleration=true\n     * If true, it uses the CSS 3D transformation to position the popper.\n     * Otherwise, it will use the `top` and `left` properties\n     */\n    gpuAcceleration: undefined,\n  },\n};\n\n/**\n * The `dataObject` is an object containing all the information used by Popper.js.\n * This object is passed to modifiers and to the `onCreate` and `onUpdate` callbacks.\n * @name dataObject\n * @property {Object} data.instance The Popper.js instance\n * @property {String} data.placement Placement applied to popper\n * @property {String} data.originalPlacement Placement originally defined on init\n * @property {Boolean} data.flipped True if popper has been flipped by flip modifier\n * @property {Boolean} data.hide True if the reference element is out of boundaries, useful to know when to hide the popper\n * @property {HTMLElement} data.arrowElement Node used as arrow by arrow modifier\n * @property {Object} data.styles Any CSS property defined here will be applied to the popper. It expects the JavaScript nomenclature (eg. `marginBottom`)\n * @property {Object} data.arrowStyles Any CSS property defined here will be applied to the popper arrow. It expects the JavaScript nomenclature (eg. `marginBottom`)\n * @property {Object} data.boundaries Offsets of the popper boundaries\n * @property {Object} data.offsets The measurements of popper, reference and arrow elements\n * @property {Object} data.offsets.popper `top`, `left`, `width`, `height` values\n * @property {Object} data.offsets.reference `top`, `left`, `width`, `height` values\n * @property {Object} data.offsets.arrow] `top` and `left` offsets, only one of them will be different from 0\n */\n","import modifiers from '../modifiers/index';\n\n/**\n * Default options provided to Popper.js constructor.<br />\n * These can be overridden using the `options` argument of Popper.js.<br />\n * To override an option, simply pass an object with the same\n * structure of the `options` object, as the 3rd argument. For example:\n * ```\n * new Popper(ref, pop, {\n *   modifiers: {\n *     preventOverflow: { enabled: false }\n *   }\n * })\n * ```\n * @type {Object}\n * @static\n * @memberof Popper\n */\nexport default {\n  /**\n   * Popper's placement.\n   * @prop {Popper.placements} placement='bottom'\n   */\n  placement: 'bottom',\n\n  /**\n   * Set this to true if you want popper to position it self in 'fixed' mode\n   * @prop {Boolean} positionFixed=false\n   */\n  positionFixed: false,\n\n  /**\n   * Whether events (resize, scroll) are initially enabled.\n   * @prop {Boolean} eventsEnabled=true\n   */\n  eventsEnabled: true,\n\n  /**\n   * Set to true if you want to automatically remove the popper when\n   * you call the `destroy` method.\n   * @prop {Boolean} removeOnDestroy=false\n   */\n  removeOnDestroy: false,\n\n  /**\n   * Callback called when the popper is created.<br />\n   * By default, it is set to no-op.<br />\n   * Access Popper.js instance with `data.instance`.\n   * @prop {onCreate}\n   */\n  onCreate: () => {},\n\n  /**\n   * Callback called when the popper is updated. This callback is not called\n   * on the initialization/creation of the popper, but only on subsequent\n   * updates.<br />\n   * By default, it is set to no-op.<br />\n   * Access Popper.js instance with `data.instance`.\n   * @prop {onUpdate}\n   */\n  onUpdate: () => {},\n\n  /**\n   * List of modifiers used to modify the offsets before they are applied to the popper.\n   * They provide most of the functionalities of Popper.js.\n   * @prop {modifiers}\n   */\n  modifiers,\n};\n\n/**\n * @callback onCreate\n * @param {dataObject} data\n */\n\n/**\n * @callback onUpdate\n * @param {dataObject} data\n */\n","// Utils\nimport debounce from './utils/debounce';\nimport isFunction from './utils/isFunction';\n\n// Methods\nimport update from './methods/update';\nimport destroy from './methods/destroy';\nimport enableEventListeners from './methods/enableEventListeners';\nimport disableEventListeners from './methods/disableEventListeners';\nimport Defaults from './methods/defaults';\nimport placements from './methods/placements';\n\nexport default class Popper {\n  /**\n   * Creates a new Popper.js instance.\n   * @class Popper\n   * @param {Element|referenceObject} reference - The reference element used to position the popper\n   * @param {Element} popper - The HTML / XML element used as the popper\n   * @param {Object} options - Your custom options to override the ones defined in [Defaults](#defaults)\n   * @return {Object} instance - The generated Popper.js instance\n   */\n  constructor(reference, popper, options = {}) {\n    // make update() debounced, so that it only runs at most once-per-tick\n    this.update = debounce(this.update.bind(this));\n\n    // with {} we create a new object with the options inside it\n    this.options = { ...Popper.Defaults, ...options };\n\n    // init state\n    this.state = {\n      isDestroyed: false,\n      isCreated: false,\n      scrollParents: [],\n    };\n\n    // get reference and popper elements (allow jQuery wrappers)\n    this.reference = reference && reference.jquery ? reference[0] : reference;\n    this.popper = popper && popper.jquery ? popper[0] : popper;\n\n    // Deep merge modifiers options\n    this.options.modifiers = {};\n    Object.keys({\n      ...Popper.Defaults.modifiers,\n      ...options.modifiers,\n    }).forEach(name => {\n      this.options.modifiers[name] = {\n        // If it's a built-in modifier, use it as base\n        ...(Popper.Defaults.modifiers[name] || {}),\n        // If there are custom options, override and merge with default ones\n        ...(options.modifiers ? options.modifiers[name] : {}),\n      };\n    });\n\n    // Refactoring modifiers' list (Object => Array)\n    this.modifiers = Object.keys(this.options.modifiers)\n      .map(name => ({\n        name,\n        ...this.options.modifiers[name],\n      }))\n      // sort the modifiers by order\n      .sort((a, b) => a.order - b.order);\n\n    // modifiers have the ability to execute arbitrary code when Popper.js get inited\n    // such code is executed in the same order of its modifier\n    // they could add new properties to their options configuration\n    // BE AWARE: don't add options to `options.modifiers.name` but to `modifierOptions`!\n    this.modifiers.forEach(modifierOptions => {\n      if (modifierOptions.enabled && isFunction(modifierOptions.onLoad)) {\n        modifierOptions.onLoad(\n          this.reference,\n          this.popper,\n          this.options,\n          modifierOptions,\n          this.state\n        );\n      }\n    });\n\n    // fire the first update to position the popper in the right place\n    this.update();\n\n    const eventsEnabled = this.options.eventsEnabled;\n    if (eventsEnabled) {\n      // setup event listeners, they will take care of update the position in specific situations\n      this.enableEventListeners();\n    }\n\n    this.state.eventsEnabled = eventsEnabled;\n  }\n\n  // We can't use class properties because they don't get listed in the\n  // class prototype and break stuff like Sinon stubs\n  update() {\n    return update.call(this);\n  }\n  destroy() {\n    return destroy.call(this);\n  }\n  enableEventListeners() {\n    return enableEventListeners.call(this);\n  }\n  disableEventListeners() {\n    return disableEventListeners.call(this);\n  }\n\n  /**\n   * Schedules an update. It will run on the next UI update available.\n   * @method scheduleUpdate\n   * @memberof Popper\n   */\n  scheduleUpdate = () => requestAnimationFrame(this.update);\n\n  /**\n   * Collection of utilities useful when writing custom modifiers.\n   * Starting from version 1.7, this method is available only if you\n   * include `popper-utils.js` before `popper.js`.\n   *\n   * **DEPRECATION**: This way to access PopperUtils is deprecated\n   * and will be removed in v2! Use the PopperUtils module directly instead.\n   * Due to the high instability of the methods contained in Utils, we can't\n   * guarantee them to follow semver. Use them at your own risk!\n   * @static\n   * @private\n   * @type {Object}\n   * @deprecated since version 1.8\n   * @member Utils\n   * @memberof Popper\n   */\n  static Utils = (typeof window !== 'undefined' ? window : global).PopperUtils;\n\n  static placements = placements;\n\n  static Defaults = Defaults;\n}\n\n/**\n * The `referenceObject` is an object that provides an interface compatible with Popper.js\n * and lets you use it as replacement of a real DOM node.<br />\n * You can use this method to position a popper relatively to a set of coordinates\n * in case you don't have a DOM node to use as reference.\n *\n * ```\n * new Popper(referenceObject, popperNode);\n * ```\n *\n * NB: This feature isn't supported in Internet Explorer 10.\n * @name referenceObject\n * @property {Function} data.getBoundingClientRect\n * A function that returns a set of coordinates compatible with the native `getBoundingClientRect` method.\n * @property {number} data.clientWidth\n * An ES6 getter that will return the width of the virtual reference element.\n * @property {number} data.clientHeight\n * An ES6 getter that will return the height of the virtual reference element.\n */\n"]},"metadata":{},"sourceType":"module"}